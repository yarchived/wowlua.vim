change = Alpha:GetChange() - Returns the animation's amount of alpha (opacity) change
duration = Alpha:GetDuration() - Returns the time for the animation to progress from start to finish
elapsed = Alpha:GetElapsed() - Returns the amount of time since the animation began playing
delay = Alpha:GetEndDelay() - Returns the amount of time the animation delays after finishing
name = Alpha:GetName() - Returns the widget object's name
type = Alpha:GetObjectType() - Returns the object's widget type
order = Alpha:GetOrder() - Returns the order of the animation within its parent group
parent = Alpha:GetParent() - Returns the object's parent object
progress = Alpha:GetProgress() - Returns the progress of an animation, ignoring smoothing effects
progress = Alpha:GetProgressWithDelay() - Returns the progress of the animation and associated delays
region = Alpha:GetRegionParent() - Returns the `Region` object on which the animation operates
handler = Alpha:GetScript("scriptType") - Returns the widget's handler function for a script
progress = Alpha:GetSmoothProgress() - Returns the progress of the animation (ignoring start and end delay)
smoothType = Alpha:GetSmoothing() - Returns the smoothing type for the animation
delay = Alpha:GetStartDelay() - Returns the amount of time the animation delays before its progress begins
hasScript = Alpha:HasScript("scriptType") - Returns whether the widget supports a script handler
Alpha:HookScript("scriptType", handler) - Securely hooks a script handler
delaying = Alpha:IsDelaying() - Returns whether the animation is currently in the middle of a start or end delay
done = Alpha:IsDone() - Returns whether the animation has finished playing
isType = Alpha:IsObjectType("type") - Returns whether the object belongs to a given widget type
paused = Alpha:IsPaused() - Returns whether the animation is currently paused
playing = Alpha:IsPlaying() - Returns whether the animation is currently playing
stopped = Alpha:IsStopped() - Returns whether the animation is currently stopped
Alpha:Pause() - Pauses the animation
Alpha:Play() - Plays the animation
Alpha:SetChange(change) - Sets the animation's amount of alpha (opacity) change
Alpha:SetDuration(duration) - Sets the time for the animation to progress from start to finish
Alpha:SetEndDelay(delay) - Sets the amount of time for the animation to delay after finishing
Alpha:SetOrder(order) - Sets the order for the animation to play within its parent group
Alpha:SetParent(animGroup) or Alpha:SetParent("animGroupName") - Sets the parent for the animation
Alpha:SetScript("scriptType", handler) - Sets the widget's handler function for a script
Alpha:SetSmoothProgress() - This function is not yet documented
Alpha:SetSmoothing("smoothType") - Sets the smoothing type for the animation
Alpha:SetStartDelay(delay) - Sets the amount of time for the animation to delay before its progress begins
Alpha:Stop() - Stops the animation
Animation

duration = Animation:GetDuration() - Returns the time for the animation to progress from start to finish
elapsed = Animation:GetElapsed() - Returns the amount of time since the animation began playing
delay = Animation:GetEndDelay() - Returns the amount of time the animation delays after finishing
name = Animation:GetName() - Returns the widget object's name
type = Animation:GetObjectType() - Returns the object's widget type
order = Animation:GetOrder() - Returns the order of the animation within its parent group
parent = Animation:GetParent() - Returns the object's parent object
progress = Animation:GetProgress() - Returns the progress of an animation, ignoring smoothing effects
progress = Animation:GetProgressWithDelay() - Returns the progress of the animation and associated delays
region = Animation:GetRegionParent() - Returns the `Region` object on which the animation operates
handler = Animation:GetScript("scriptType") - Returns the widget's handler function for a script
progress = Animation:GetSmoothProgress() - Returns the progress of the animation (ignoring start and end delay)
smoothType = Animation:GetSmoothing() - Returns the smoothing type for the animation
delay = Animation:GetStartDelay() - Returns the amount of time the animation delays before its progress begins
hasScript = Animation:HasScript("scriptType") - Returns whether the widget supports a script handler
Animation:HookScript("scriptType", handler) - Securely hooks a script handler
delaying = Animation:IsDelaying() - Returns whether the animation is currently in the middle of a start or end delay
done = Animation:IsDone() - Returns whether the animation has finished playing
isType = Animation:IsObjectType("type") - Returns whether the object belongs to a given widget type
paused = Animation:IsPaused() - Returns whether the animation is currently paused
playing = Animation:IsPlaying() - Returns whether the animation is currently playing
stopped = Animation:IsStopped() - Returns whether the animation is currently stopped
Animation:Pause() - Pauses the animation
Animation:Play() - Plays the animation
Animation:SetDuration(duration) - Sets the time for the animation to progress from start to finish
Animation:SetEndDelay(delay) - Sets the amount of time for the animation to delay after finishing
Animation:SetOrder(order) - Sets the order for the animation to play within its parent group
Animation:SetParent(animGroup) or Animation:SetParent("animGroupName") - Sets the parent for the animation
Animation:SetScript("scriptType", handler) - Sets the widget's handler function for a script
Animation:SetSmoothProgress() - This function is not yet documented
Animation:SetSmoothing("smoothType") - Sets the smoothing type for the animation
Animation:SetStartDelay(delay) - Sets the amount of time for the animation to delay before its progress begins
Animation:Stop() - Stops the animation
AnimationGroup

animation = AnimationGroup:CreateAnimation("animationType" [, "name" [, "inheritsFrom"]]) - Creates an Animation as a child of this group
AnimationGroup:Finish() - Causes animations within the group to complete and stop
... = AnimationGroup:GetAnimations() - Returns a list of animations belonging to the group
duration = AnimationGroup:GetDuration() - Returns the duration of a single loop cycle for the group, as determined by its child animations
AnimationGroup:GetIgnoreFramerateThrottle() - This function is not yet documented
x, y = AnimationGroup:GetInitialOffset() - Returns the starting static translation for the animated region
loopState = AnimationGroup:GetLoopState() - Returns the current loop state of the group
loopType = AnimationGroup:GetLooping() - Returns the looping behavior of the group
maxOrder = AnimationGroup:GetMaxOrder() - Returns the highest order amongst the animations in the group
name = AnimationGroup:GetName() - Returns the widget object's name
type = AnimationGroup:GetObjectType() - Returns the object's widget type
parent = AnimationGroup:GetParent() - Returns the object's parent object
progress = AnimationGroup:GetProgress() - Returns the current state of the animation group's progress
handler = AnimationGroup:GetScript("scriptType") - Returns the widget's handler function for a script
hasScript = AnimationGroup:HasScript("scriptType") - Returns whether the widget supports a script handler
AnimationGroup:HookScript("scriptType", handler) - Securely hooks a script handler
done = AnimationGroup:IsDone() - Returns whether the group has finished playing
isType = AnimationGroup:IsObjectType("type") - Returns whether the object belongs to a given widget type
paused = AnimationGroup:IsPaused() - Returns whether the group is paused
isPending = AnimationGroup:IsPendingFinish() - Returns whether or not the animation group is pending finish
playing = AnimationGroup:IsPlaying() - Returns whether the group is playing
AnimationGroup:Pause() - Pauses animation of the group
AnimationGroup:Play() - Starts animating the group
AnimationGroup:SetIgnoreFramerateThrottle() - This function is not yet documented
AnimationGroup:SetInitialOffset(x, y) - Sets a static translation for the animated region
AnimationGroup:SetLooping("loopType") - Sets the looping behavior of the group
AnimationGroup:SetScript("scriptType", handler) - Sets the widget's handler function for a script
AnimationGroup:Stop() - Stops animation of the group
ArchaeologyDigSiteFrame

ArchaeologyDigSiteFrame:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = ArchaeologyDigSiteFrame:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = ArchaeologyDigSiteFrame:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
ArchaeologyDigSiteFrame:ClearAllPoints() - Removes all anchor points from the region
animationGroup = ArchaeologyDigSiteFrame:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = ArchaeologyDigSiteFrame:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = ArchaeologyDigSiteFrame:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = ArchaeologyDigSiteFrame:CreateTitleRegion() - Creates a title region for dragging the frame
ArchaeologyDigSiteFrame:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
ArchaeologyDigSiteFrame:DrawBlob(blobId, draw) - Draws a blob onto the frame
ArchaeologyDigSiteFrame:DrawNone() - Removes all drawn blobs on the frame
ArchaeologyDigSiteFrame:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
ArchaeologyDigSiteFrame:EnableJoystick(enable) - Enables or disables joystick interactivity
ArchaeologyDigSiteFrame:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
ArchaeologyDigSiteFrame:EnableMerging() - This function is not yet documented
ArchaeologyDigSiteFrame:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
ArchaeologyDigSiteFrame:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
ArchaeologyDigSiteFrame:EnableSmoothing() - This function is not yet documented
alpha = ArchaeologyDigSiteFrame:GetAlpha() - Returns the opacity of the region relative to its parent
... = ArchaeologyDigSiteFrame:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = ArchaeologyDigSiteFrame:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = ArchaeologyDigSiteFrame:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = ArchaeologyDigSiteFrame:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = ArchaeologyDigSiteFrame:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = ArchaeologyDigSiteFrame:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = ArchaeologyDigSiteFrame:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = ArchaeologyDigSiteFrame:GetCenter() - Returns the screen coordinates of the region's center
... = ArchaeologyDigSiteFrame:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = ArchaeologyDigSiteFrame:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = ArchaeologyDigSiteFrame:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
ArchaeologyDigSiteFrame:GetDontSavePosition() - This function is not yet documented
alpha = ArchaeologyDigSiteFrame:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = ArchaeologyDigSiteFrame:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = ArchaeologyDigSiteFrame:GetEffectiveScale() - Returns the overall scale factor of the frame
level = ArchaeologyDigSiteFrame:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = ArchaeologyDigSiteFrame:GetFrameStrata() - Returns the general layering strata of the frame
height = ArchaeologyDigSiteFrame:GetHeight() - Returns the height of the region
left, right, top, bottom = ArchaeologyDigSiteFrame:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = ArchaeologyDigSiteFrame:GetID() - Returns the frame's numeric identifier
left = ArchaeologyDigSiteFrame:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
maxWidth, maxHeight = ArchaeologyDigSiteFrame:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = ArchaeologyDigSiteFrame:GetMinResize() - Returns the minimum size of the frame for user resizing
name = ArchaeologyDigSiteFrame:GetName() - Returns the widget object's name
numChildren = ArchaeologyDigSiteFrame:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = ArchaeologyDigSiteFrame:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = ArchaeologyDigSiteFrame:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = ArchaeologyDigSiteFrame:GetObjectType() - Returns the object's widget type
parent = ArchaeologyDigSiteFrame:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = ArchaeologyDigSiteFrame:GetPoint(index) - Returns information about one of the region's anchor points
ArchaeologyDigSiteFrame:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = ArchaeologyDigSiteFrame:GetRect() - Returns the position and dimensions of the region
... = ArchaeologyDigSiteFrame:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = ArchaeologyDigSiteFrame:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = ArchaeologyDigSiteFrame:GetScale() - Returns the frame's scale factor
handler = ArchaeologyDigSiteFrame:GetScript("scriptType") - Returns the widget's handler function for a script
width, height = ArchaeologyDigSiteFrame:GetSize() - Returns the width and height of the region
region = ArchaeologyDigSiteFrame:GetTitleRegion() - Returns the frame's TitleRegion object
top = ArchaeologyDigSiteFrame:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = ArchaeologyDigSiteFrame:GetWidth() - Returns the width of the region
hasScript = ArchaeologyDigSiteFrame:HasScript("scriptType") - Returns whether the widget supports a script handler
ArchaeologyDigSiteFrame:Hide() - Hides the region
ArchaeologyDigSiteFrame:HookScript("scriptType", handler) - Securely hooks a script handler
ArchaeologyDigSiteFrame:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = ArchaeologyDigSiteFrame:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = ArchaeologyDigSiteFrame:IsDragging() - Returns whether the region is currently being dragged
registered = ArchaeologyDigSiteFrame:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = ArchaeologyDigSiteFrame:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = ArchaeologyDigSiteFrame:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = ArchaeologyDigSiteFrame:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = ArchaeologyDigSiteFrame:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = ArchaeologyDigSiteFrame:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = ArchaeologyDigSiteFrame:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = ArchaeologyDigSiteFrame:IsMovable() - Returns whether the frame can be moved by the user
isType = ArchaeologyDigSiteFrame:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = ArchaeologyDigSiteFrame:IsProtected() - Returns whether the region is protected
enabled = ArchaeologyDigSiteFrame:IsResizable() - Returns whether the frame can be resized by the user
shown = ArchaeologyDigSiteFrame:IsShown() - Returns whether the region is shown
enabled = ArchaeologyDigSiteFrame:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = ArchaeologyDigSiteFrame:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = ArchaeologyDigSiteFrame:IsVisible() - Returns whether the region is visible
ArchaeologyDigSiteFrame:Lower() - Reduces the frame's frame level below all other frames in its strata
ArchaeologyDigSiteFrame:Raise() - Increases the frame's frame level above all other frames in its strata
ArchaeologyDigSiteFrame:RegisterAllEvents() - Registers the frame for all events
ArchaeologyDigSiteFrame:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
ArchaeologyDigSiteFrame:RegisterForDrag(...) - Registers the frame for dragging
ArchaeologyDigSiteFrame:SetAllPoints([region]) or ArchaeologyDigSiteFrame:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
ArchaeologyDigSiteFrame:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
ArchaeologyDigSiteFrame:SetAttribute("name", value) - Sets a secure frame attribute
ArchaeologyDigSiteFrame:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
ArchaeologyDigSiteFrame:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
ArchaeologyDigSiteFrame:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
ArchaeologyDigSiteFrame:SetBorderAlpha() - This function is not yet documented
ArchaeologyDigSiteFrame:SetBorderScalar() - This function is not yet documented
ArchaeologyDigSiteFrame:SetBorderTexture() - This function is not yet documented
ArchaeologyDigSiteFrame:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
ArchaeologyDigSiteFrame:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
ArchaeologyDigSiteFrame:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
ArchaeologyDigSiteFrame:SetDontSavePosition() - This function is not yet documented
ArchaeologyDigSiteFrame:SetFillAlpha() - This function is not yet documented
ArchaeologyDigSiteFrame:SetFillTexture() - This function is not yet documented
ArchaeologyDigSiteFrame:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
ArchaeologyDigSiteFrame:SetFrameStrata("strata") - Sets the general layering strata of the frame
ArchaeologyDigSiteFrame:SetHeight(height) - Sets the region's height
ArchaeologyDigSiteFrame:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
ArchaeologyDigSiteFrame:SetID(id) - Sets a numeric identifier for the frame
ArchaeologyDigSiteFrame:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
ArchaeologyDigSiteFrame:SetMergeThreshold() - This function is not yet documented
ArchaeologyDigSiteFrame:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
ArchaeologyDigSiteFrame:SetMovable(enable) - Sets whether the frame can be moved by the user
ArchaeologyDigSiteFrame:SetNumSplinePoints(points) - Sets the number of points used in the blob polygon
ArchaeologyDigSiteFrame:SetParent(frame) or ArchaeologyDigSiteFrame:SetParent("name") - Makes another frame the parent of this region
ArchaeologyDigSiteFrame:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
ArchaeologyDigSiteFrame:SetPropagateKeyboardInput() - This function is not yet documented
ArchaeologyDigSiteFrame:SetResizable(enable) - Sets whether the frame can be resized by the user
ArchaeologyDigSiteFrame:SetScale(scale) - Sets the frame's scale factor
ArchaeologyDigSiteFrame:SetScript("scriptType", handler) - Sets the widget's handler function for a script
ArchaeologyDigSiteFrame:SetSize(width, height) - Sets the size of the region to the specified values
ArchaeologyDigSiteFrame:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
ArchaeologyDigSiteFrame:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
ArchaeologyDigSiteFrame:SetWidth(width) - Sets the region's width
ArchaeologyDigSiteFrame:Show() - Shows the region
ArchaeologyDigSiteFrame:StartMoving() - Begins repositioning the frame via mouse movement
ArchaeologyDigSiteFrame:StartSizing() - Begins resizing the frame via mouse movement
ArchaeologyDigSiteFrame:StopAnimating() - Stops any active animations involving the region or its children
ArchaeologyDigSiteFrame:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
ArchaeologyDigSiteFrame:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
ArchaeologyDigSiteFrame:UnregisterEvent("event") - Unregisters the frame for an event
Button

Button:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = Button:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = Button:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
Button:ClearAllPoints() - Removes all anchor points from the region
Button:Click("button", down) - Performs a (virtual) mouse click on the button
animationGroup = Button:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = Button:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = Button:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = Button:CreateTitleRegion() - Creates a title region for dragging the frame
Button:Disable() - Disallows user interaction with the button
Button:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
Button:Enable() - Allows user interaction with the button
Button:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
Button:EnableJoystick(enable) - Enables or disables joystick interactivity
Button:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
Button:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
Button:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
alpha = Button:GetAlpha() - Returns the opacity of the region relative to its parent
... = Button:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = Button:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = Button:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = Button:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = Button:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = Button:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = Button:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
state = Button:GetButtonState() - Returns the button's current state
x, y = Button:GetCenter() - Returns the screen coordinates of the region's center
... = Button:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = Button:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = Button:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
font = Button:GetDisabledFontObject() - Returns the font object used for the button's disabled state
texture = Button:GetDisabledTexture() - Returns the texture used when the button is disabled
Button:GetDontSavePosition() - This function is not yet documented
alpha = Button:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = Button:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = Button:GetEffectiveScale() - Returns the overall scale factor of the frame
fontstring = Button:GetFontString() - Returns the `FontString` object used for the button's label text
level = Button:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = Button:GetFrameStrata() - Returns the general layering strata of the frame
height = Button:GetHeight() - Returns the height of the region
font = Button:GetHighlightFontObject() - Returns the font object used when the button is highlighted
texture = Button:GetHighlightTexture() - Returns the texture used when the button is highlighted
left, right, top, bottom = Button:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = Button:GetID() - Returns the frame's numeric identifier
left = Button:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
maxWidth, maxHeight = Button:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = Button:GetMinResize() - Returns the minimum size of the frame for user resizing
isEnabled = Button:GetMotionScriptsWhileDisabled() - Determines whether [[docs/scripts/OnEnter|OnEnter]]/[[docs/scripts/OnLeave|OnLeave]] scripts will fire while the button is disabled
name = Button:GetName() - Returns the widget object's name
font = Button:GetNormalFontObject() - Returns the font object used for the button's normal state
texture = Button:GetNormalTexture() - Returns the texture used for the button's normal state
numChildren = Button:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = Button:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = Button:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = Button:GetObjectType() - Returns the object's widget type
parent = Button:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = Button:GetPoint(index) - Returns information about one of the region's anchor points
Button:GetPropagateKeyboardInput() - This function is not yet documented
x, y = Button:GetPushedTextOffset() - Returns the offset for moving the button's label text when pushed
texture = Button:GetPushedTexture() - Returns the texture used when the button is pushed
left, bottom, width, height = Button:GetRect() - Returns the position and dimensions of the region
... = Button:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = Button:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = Button:GetScale() - Returns the frame's scale factor
handler = Button:GetScript("scriptType") - Returns the widget's handler function for a script
width, height = Button:GetSize() - Returns the width and height of the region
text = Button:GetText() - Returns the text of the button's label
height = Button:GetTextHeight() - Returns the height of the button's text label
width = Button:GetTextWidth() - Returns the width of the button's text label
region = Button:GetTitleRegion() - Returns the frame's TitleRegion object
top = Button:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = Button:GetWidth() - Returns the width of the region
hasScript = Button:HasScript("scriptType") - Returns whether the widget supports a script handler
Button:Hide() - Hides the region
Button:HookScript("scriptType", handler) - Securely hooks a script handler
Button:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = Button:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = Button:IsDragging() - Returns whether the region is currently being dragged
enabled = Button:IsEnabled() - Returns whether user interaction with the button is allowed
registered = Button:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = Button:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = Button:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = Button:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = Button:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = Button:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = Button:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = Button:IsMovable() - Returns whether the frame can be moved by the user
isType = Button:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = Button:IsProtected() - Returns whether the region is protected
enabled = Button:IsResizable() - Returns whether the frame can be resized by the user
shown = Button:IsShown() - Returns whether the region is shown
enabled = Button:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = Button:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = Button:IsVisible() - Returns whether the region is visible
Button:LockHighlight() - Locks the button in its highlight state
Button:Lower() - Reduces the frame's frame level below all other frames in its strata
Button:Raise() - Increases the frame's frame level above all other frames in its strata
Button:RegisterAllEvents() - Registers the frame for all events
Button:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
Button:RegisterForClicks(...) - Registers a button to receive mouse clicks
Button:RegisterForDrag(...) - Registers the frame for dragging
Button:SetAllPoints([region]) or Button:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
Button:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
Button:SetAttribute("name", value) - Sets a secure frame attribute
Button:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
Button:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
Button:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
Button:SetButtonState("state", lock) - Sets the button's state
Button:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
Button:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
Button:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
Button:SetDisabledFontObject(font) - Sets the font object used for the button's disabled state
Button:SetDisabledTexture(texture) or Button:SetDisabledTexture("filename") - Sets the texture used when the button is disabled
Button:SetDontSavePosition() - This function is not yet documented
Button:SetFontString(fontstring) - Sets the `FontString` object used for the button's label text
Button:SetFormattedText("formatString", ...) - Sets the button's label text using format specifiers
Button:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
Button:SetFrameStrata("strata") - Sets the general layering strata of the frame
Button:SetHeight(height) - Sets the region's height
Button:SetHighlightFontObject(font) - Sets the font object used when the button is highlighted
Button:SetHighlightTexture(texture [, "mode"]) or Button:SetHighlightTexture("filename" [, "mode"]) - Sets the texture used when the button is highlighted
Button:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
Button:SetID(id) - Sets a numeric identifier for the frame
Button:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
Button:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
Button:SetMotionScriptsWhileDisabled(enabled) - Sets whether the button should fire [[docs/scripts/OnEnter|OnEnter]]/[[docs/scripts/OnLeave|OnLeave]] events while disabled
Button:SetMovable(enable) - Sets whether the frame can be moved by the user
Button:SetNormalFontObject(font) - Sets the font object used for the button's normal state
Button:SetNormalTexture(texture) or Button:SetNormalTexture("filename") - Sets the texture used for the button's normal state
Button:SetParent(frame) or Button:SetParent("name") - Makes another frame the parent of this region
Button:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
Button:SetPropagateKeyboardInput() - This function is not yet documented
Button:SetPushedTextOffset(x, y) - Sets the offset for moving the button's label text when pushed
Button:SetPushedTexture(texture) or Button:SetPushedTexture("filename") - Sets the texture used when the button is pushed
Button:SetResizable(enable) - Sets whether the frame can be resized by the user
Button:SetScale(scale) - Sets the frame's scale factor
Button:SetScript("scriptType", handler) - Sets the widget's handler function for a script
Button:SetSize(width, height) - Sets the size of the region to the specified values
Button:SetText("text") - Sets the text displayed as the button's label
Button:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
Button:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
Button:SetWidth(width) - Sets the region's width
Button:Show() - Shows the region
Button:StartMoving() - Begins repositioning the frame via mouse movement
Button:StartSizing() - Begins resizing the frame via mouse movement
Button:StopAnimating() - Stops any active animations involving the region or its children
Button:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
Button:UnlockHighlight() - Unlocks the button's highlight state
Button:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
Button:UnregisterEvent("event") - Unregisters the frame for an event
CheckButton

CheckButton:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = CheckButton:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = CheckButton:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
CheckButton:ClearAllPoints() - Removes all anchor points from the region
CheckButton:Click("button", down) - Performs a (virtual) mouse click on the button
animationGroup = CheckButton:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = CheckButton:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = CheckButton:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = CheckButton:CreateTitleRegion() - Creates a title region for dragging the frame
CheckButton:Disable() - Disallows user interaction with the button
CheckButton:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
CheckButton:Enable() - Allows user interaction with the button
CheckButton:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
CheckButton:EnableJoystick(enable) - Enables or disables joystick interactivity
CheckButton:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
CheckButton:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
CheckButton:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
alpha = CheckButton:GetAlpha() - Returns the opacity of the region relative to its parent
... = CheckButton:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = CheckButton:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = CheckButton:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = CheckButton:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = CheckButton:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = CheckButton:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = CheckButton:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
state = CheckButton:GetButtonState() - Returns the button's current state
x, y = CheckButton:GetCenter() - Returns the screen coordinates of the region's center
enabled = CheckButton:GetChecked() - Returns whether the check button is checked
texture = CheckButton:GetCheckedTexture() - Returns the texture used when the button is checked
... = CheckButton:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = CheckButton:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = CheckButton:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
texture = CheckButton:GetDisabledCheckedTexture() - Returns the texture used when the button is disabled and checked
font = CheckButton:GetDisabledFontObject() - Returns the font object used for the button's disabled state
texture = CheckButton:GetDisabledTexture() - Returns the texture used when the button is disabled
CheckButton:GetDontSavePosition() - This function is not yet documented
alpha = CheckButton:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = CheckButton:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = CheckButton:GetEffectiveScale() - Returns the overall scale factor of the frame
fontstring = CheckButton:GetFontString() - Returns the `FontString` object used for the button's label text
level = CheckButton:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = CheckButton:GetFrameStrata() - Returns the general layering strata of the frame
height = CheckButton:GetHeight() - Returns the height of the region
font = CheckButton:GetHighlightFontObject() - Returns the font object used when the button is highlighted
texture = CheckButton:GetHighlightTexture() - Returns the texture used when the button is highlighted
left, right, top, bottom = CheckButton:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = CheckButton:GetID() - Returns the frame's numeric identifier
left = CheckButton:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
maxWidth, maxHeight = CheckButton:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = CheckButton:GetMinResize() - Returns the minimum size of the frame for user resizing
isEnabled = CheckButton:GetMotionScriptsWhileDisabled() - Determines whether [[docs/scripts/OnEnter|OnEnter]]/[[docs/scripts/OnLeave|OnLeave]] scripts will fire while the button is disabled
name = CheckButton:GetName() - Returns the widget object's name
font = CheckButton:GetNormalFontObject() - Returns the font object used for the button's normal state
texture = CheckButton:GetNormalTexture() - Returns the texture used for the button's normal state
numChildren = CheckButton:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = CheckButton:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = CheckButton:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = CheckButton:GetObjectType() - Returns the object's widget type
parent = CheckButton:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = CheckButton:GetPoint(index) - Returns information about one of the region's anchor points
CheckButton:GetPropagateKeyboardInput() - This function is not yet documented
x, y = CheckButton:GetPushedTextOffset() - Returns the offset for moving the button's label text when pushed
texture = CheckButton:GetPushedTexture() - Returns the texture used when the button is pushed
left, bottom, width, height = CheckButton:GetRect() - Returns the position and dimensions of the region
... = CheckButton:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = CheckButton:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = CheckButton:GetScale() - Returns the frame's scale factor
handler = CheckButton:GetScript("scriptType") - Returns the widget's handler function for a script
width, height = CheckButton:GetSize() - Returns the width and height of the region
text = CheckButton:GetText() - Returns the text of the button's label
height = CheckButton:GetTextHeight() - Returns the height of the button's text label
width = CheckButton:GetTextWidth() - Returns the width of the button's text label
region = CheckButton:GetTitleRegion() - Returns the frame's TitleRegion object
top = CheckButton:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = CheckButton:GetWidth() - Returns the width of the region
hasScript = CheckButton:HasScript("scriptType") - Returns whether the widget supports a script handler
CheckButton:Hide() - Hides the region
CheckButton:HookScript("scriptType", handler) - Securely hooks a script handler
CheckButton:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = CheckButton:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = CheckButton:IsDragging() - Returns whether the region is currently being dragged
enabled = CheckButton:IsEnabled() - Returns whether user interaction with the button is allowed
registered = CheckButton:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = CheckButton:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = CheckButton:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = CheckButton:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = CheckButton:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = CheckButton:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = CheckButton:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = CheckButton:IsMovable() - Returns whether the frame can be moved by the user
isType = CheckButton:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = CheckButton:IsProtected() - Returns whether the region is protected
enabled = CheckButton:IsResizable() - Returns whether the frame can be resized by the user
shown = CheckButton:IsShown() - Returns whether the region is shown
enabled = CheckButton:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = CheckButton:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = CheckButton:IsVisible() - Returns whether the region is visible
CheckButton:LockHighlight() - Locks the button in its highlight state
CheckButton:Lower() - Reduces the frame's frame level below all other frames in its strata
CheckButton:Raise() - Increases the frame's frame level above all other frames in its strata
CheckButton:RegisterAllEvents() - Registers the frame for all events
CheckButton:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
CheckButton:RegisterForClicks(...) - Registers a button to receive mouse clicks
CheckButton:RegisterForDrag(...) - Registers the frame for dragging
CheckButton:SetAllPoints([region]) or CheckButton:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
CheckButton:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
CheckButton:SetAttribute("name", value) - Sets a secure frame attribute
CheckButton:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
CheckButton:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
CheckButton:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
CheckButton:SetButtonState("state", lock) - Sets the button's state
CheckButton:SetChecked(enable) - Sets whether the check button is checked
CheckButton:SetCheckedTexture(texture) or CheckButton:SetCheckedTexture("filename") - Sets the texture used when the button is checked
CheckButton:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
CheckButton:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
CheckButton:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
CheckButton:SetDisabledCheckedTexture(texture) or CheckButton:SetDisabledCheckedTexture("filename") - Sets the texture used when the button is disabled and checked
CheckButton:SetDisabledFontObject(font) - Sets the font object used for the button's disabled state
CheckButton:SetDisabledTexture(texture) or CheckButton:SetDisabledTexture("filename") - Sets the texture used when the button is disabled
CheckButton:SetDontSavePosition() - This function is not yet documented
CheckButton:SetFontString(fontstring) - Sets the `FontString` object used for the button's label text
CheckButton:SetFormattedText("formatString", ...) - Sets the button's label text using format specifiers
CheckButton:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
CheckButton:SetFrameStrata("strata") - Sets the general layering strata of the frame
CheckButton:SetHeight(height) - Sets the region's height
CheckButton:SetHighlightFontObject(font) - Sets the font object used when the button is highlighted
CheckButton:SetHighlightTexture(texture [, "mode"]) or CheckButton:SetHighlightTexture("filename" [, "mode"]) - Sets the texture used when the button is highlighted
CheckButton:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
CheckButton:SetID(id) - Sets a numeric identifier for the frame
CheckButton:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
CheckButton:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
CheckButton:SetMotionScriptsWhileDisabled(enabled) - Sets whether the button should fire [[docs/scripts/OnEnter|OnEnter]]/[[docs/scripts/OnLeave|OnLeave]] events while disabled
CheckButton:SetMovable(enable) - Sets whether the frame can be moved by the user
CheckButton:SetNormalFontObject(font) - Sets the font object used for the button's normal state
CheckButton:SetNormalTexture(texture) or CheckButton:SetNormalTexture("filename") - Sets the texture used for the button's normal state
CheckButton:SetParent(frame) or CheckButton:SetParent("name") - Makes another frame the parent of this region
CheckButton:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
CheckButton:SetPropagateKeyboardInput() - This function is not yet documented
CheckButton:SetPushedTextOffset(x, y) - Sets the offset for moving the button's label text when pushed
CheckButton:SetPushedTexture(texture) or CheckButton:SetPushedTexture("filename") - Sets the texture used when the button is pushed
CheckButton:SetResizable(enable) - Sets whether the frame can be resized by the user
CheckButton:SetScale(scale) - Sets the frame's scale factor
CheckButton:SetScript("scriptType", handler) - Sets the widget's handler function for a script
CheckButton:SetSize(width, height) - Sets the size of the region to the specified values
CheckButton:SetText("text") - Sets the text displayed as the button's label
CheckButton:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
CheckButton:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
CheckButton:SetWidth(width) - Sets the region's width
CheckButton:Show() - Shows the region
CheckButton:StartMoving() - Begins repositioning the frame via mouse movement
CheckButton:StartSizing() - Begins resizing the frame via mouse movement
CheckButton:StopAnimating() - Stops any active animations involving the region or its children
CheckButton:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
CheckButton:UnlockHighlight() - Unlocks the button's highlight state
CheckButton:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
CheckButton:UnregisterEvent("event") - Unregisters the frame for an event
ColorSelect

ColorSelect:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = ColorSelect:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = ColorSelect:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
ColorSelect:ClearAllPoints() - Removes all anchor points from the region
animationGroup = ColorSelect:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = ColorSelect:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = ColorSelect:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = ColorSelect:CreateTitleRegion() - Creates a title region for dragging the frame
ColorSelect:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
ColorSelect:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
ColorSelect:EnableJoystick(enable) - Enables or disables joystick interactivity
ColorSelect:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
ColorSelect:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
ColorSelect:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
alpha = ColorSelect:GetAlpha() - Returns the opacity of the region relative to its parent
... = ColorSelect:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = ColorSelect:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = ColorSelect:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = ColorSelect:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = ColorSelect:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = ColorSelect:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = ColorSelect:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = ColorSelect:GetCenter() - Returns the screen coordinates of the region's center
... = ColorSelect:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = ColorSelect:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
hue, saturation, value = ColorSelect:GetColorHSV() - Returns the hue, saturation and value of the currently selected color
red, blue, green = ColorSelect:GetColorRGB() - Returns the red, green and blue components of the currently selected color
texture = ColorSelect:GetColorValueTexture() - Returns the texture for the color picker's value slider background
texture = ColorSelect:GetColorValueThumbTexture() - Returns the texture for the color picker's value slider thumb
texture = ColorSelect:GetColorWheelTexture() - Returns the texture for the color picker's hue/saturation wheel
texture = ColorSelect:GetColorWheelThumbTexture() - Returns the texture for the selection indicator on the color picker's hue/saturation wheel
depth = ColorSelect:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
ColorSelect:GetDontSavePosition() - This function is not yet documented
alpha = ColorSelect:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = ColorSelect:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = ColorSelect:GetEffectiveScale() - Returns the overall scale factor of the frame
level = ColorSelect:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = ColorSelect:GetFrameStrata() - Returns the general layering strata of the frame
height = ColorSelect:GetHeight() - Returns the height of the region
left, right, top, bottom = ColorSelect:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = ColorSelect:GetID() - Returns the frame's numeric identifier
left = ColorSelect:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
maxWidth, maxHeight = ColorSelect:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = ColorSelect:GetMinResize() - Returns the minimum size of the frame for user resizing
name = ColorSelect:GetName() - Returns the widget object's name
numChildren = ColorSelect:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = ColorSelect:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = ColorSelect:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = ColorSelect:GetObjectType() - Returns the object's widget type
parent = ColorSelect:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = ColorSelect:GetPoint(index) - Returns information about one of the region's anchor points
ColorSelect:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = ColorSelect:GetRect() - Returns the position and dimensions of the region
... = ColorSelect:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = ColorSelect:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = ColorSelect:GetScale() - Returns the frame's scale factor
handler = ColorSelect:GetScript("scriptType") - Returns the widget's handler function for a script
width, height = ColorSelect:GetSize() - Returns the width and height of the region
region = ColorSelect:GetTitleRegion() - Returns the frame's TitleRegion object
top = ColorSelect:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = ColorSelect:GetWidth() - Returns the width of the region
hasScript = ColorSelect:HasScript("scriptType") - Returns whether the widget supports a script handler
ColorSelect:Hide() - Hides the region
ColorSelect:HookScript("scriptType", handler) - Securely hooks a script handler
ColorSelect:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = ColorSelect:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = ColorSelect:IsDragging() - Returns whether the region is currently being dragged
registered = ColorSelect:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = ColorSelect:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = ColorSelect:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = ColorSelect:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = ColorSelect:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = ColorSelect:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = ColorSelect:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = ColorSelect:IsMovable() - Returns whether the frame can be moved by the user
isType = ColorSelect:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = ColorSelect:IsProtected() - Returns whether the region is protected
enabled = ColorSelect:IsResizable() - Returns whether the frame can be resized by the user
shown = ColorSelect:IsShown() - Returns whether the region is shown
enabled = ColorSelect:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = ColorSelect:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = ColorSelect:IsVisible() - Returns whether the region is visible
ColorSelect:Lower() - Reduces the frame's frame level below all other frames in its strata
ColorSelect:Raise() - Increases the frame's frame level above all other frames in its strata
ColorSelect:RegisterAllEvents() - Registers the frame for all events
ColorSelect:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
ColorSelect:RegisterForDrag(...) - Registers the frame for dragging
ColorSelect:SetAllPoints([region]) or ColorSelect:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
ColorSelect:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
ColorSelect:SetAttribute("name", value) - Sets a secure frame attribute
ColorSelect:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
ColorSelect:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
ColorSelect:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
ColorSelect:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
ColorSelect:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
ColorSelect:SetColorHSV(hue, saturation, value) - Sets the color picker's selected color by hue, saturation and value
ColorSelect:SetColorRGB(red, blue, green) - Sets the color picker's selected color by red, green and blue components
ColorSelect:SetColorValueTexture(texture) - Sets the `Texture` object used to display the color picker's value slider
ColorSelect:SetColorValueThumbTexture(texture) or ColorSelect:SetColorValueThumbTexture("filename") - Sets the texture for the color picker's value slider thumb
ColorSelect:SetColorWheelTexture(texture) - Sets the `Texture` object used to display the color picker's hue/saturation wheel
ColorSelect:SetColorWheelThumbTexture(texture) or ColorSelect:SetColorWheelThumbTexture("filename") - Sets the texture for the selection indicator on the color picker's hue/saturation wheel
ColorSelect:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
ColorSelect:SetDontSavePosition() - This function is not yet documented
ColorSelect:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
ColorSelect:SetFrameStrata("strata") - Sets the general layering strata of the frame
ColorSelect:SetHeight(height) - Sets the region's height
ColorSelect:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
ColorSelect:SetID(id) - Sets a numeric identifier for the frame
ColorSelect:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
ColorSelect:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
ColorSelect:SetMovable(enable) - Sets whether the frame can be moved by the user
ColorSelect:SetParent(frame) or ColorSelect:SetParent("name") - Makes another frame the parent of this region
ColorSelect:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
ColorSelect:SetPropagateKeyboardInput() - This function is not yet documented
ColorSelect:SetResizable(enable) - Sets whether the frame can be resized by the user
ColorSelect:SetScale(scale) - Sets the frame's scale factor
ColorSelect:SetScript("scriptType", handler) - Sets the widget's handler function for a script
ColorSelect:SetSize(width, height) - Sets the size of the region to the specified values
ColorSelect:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
ColorSelect:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
ColorSelect:SetWidth(width) - Sets the region's width
ColorSelect:Show() - Shows the region
ColorSelect:StartMoving() - Begins repositioning the frame via mouse movement
ColorSelect:StartSizing() - Begins resizing the frame via mouse movement
ColorSelect:StopAnimating() - Stops any active animations involving the region or its children
ColorSelect:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
ColorSelect:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
ColorSelect:UnregisterEvent("event") - Unregisters the frame for an event
ControlPoint

name = ControlPoint:GetName() - Returns the widget object's name
type = ControlPoint:GetObjectType() - Returns the object's widget type
x, y = ControlPoint:GetOffset() - Returns the offset for the control point
order = ControlPoint:GetOrder() - Returns the order of the control point in a path animation
parent = ControlPoint:GetParent() - Returns the object's parent object
isType = ControlPoint:IsObjectType("type") - Returns whether the object belongs to a given widget type
ControlPoint:SetOffset(x, y) - Sets the offset for the control point
ControlPoint:SetOrder(order) - Sets the order of the control point in a path animation
ControlPoint:SetParent([path [, order]]) or ControlPoint:SetParent(["path" [, order]]) - Sets a new path animation parent for a control point
Cooldown

Cooldown:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = Cooldown:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = Cooldown:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
Cooldown:ClearAllPoints() - Removes all anchor points from the region
animationGroup = Cooldown:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = Cooldown:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = Cooldown:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = Cooldown:CreateTitleRegion() - Creates a title region for dragging the frame
Cooldown:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
Cooldown:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
Cooldown:EnableJoystick(enable) - Enables or disables joystick interactivity
Cooldown:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
Cooldown:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
Cooldown:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
alpha = Cooldown:GetAlpha() - Returns the opacity of the region relative to its parent
... = Cooldown:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = Cooldown:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = Cooldown:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = Cooldown:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = Cooldown:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = Cooldown:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = Cooldown:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = Cooldown:GetCenter() - Returns the screen coordinates of the region's center
... = Cooldown:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = Cooldown:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = Cooldown:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
Cooldown:GetDontSavePosition() - This function is not yet documented
enabled = Cooldown:GetDrawEdge() - Returns whether a bright line should be drawn on the moving edge of the cooldown animation
alpha = Cooldown:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = Cooldown:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = Cooldown:GetEffectiveScale() - Returns the overall scale factor of the frame
level = Cooldown:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = Cooldown:GetFrameStrata() - Returns the general layering strata of the frame
height = Cooldown:GetHeight() - Returns the height of the region
left, right, top, bottom = Cooldown:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = Cooldown:GetID() - Returns the frame's numeric identifier
left = Cooldown:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
maxWidth, maxHeight = Cooldown:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = Cooldown:GetMinResize() - Returns the minimum size of the frame for user resizing
name = Cooldown:GetName() - Returns the widget object's name
numChildren = Cooldown:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = Cooldown:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = Cooldown:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = Cooldown:GetObjectType() - Returns the object's widget type
parent = Cooldown:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = Cooldown:GetPoint(index) - Returns information about one of the region's anchor points
Cooldown:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = Cooldown:GetRect() - Returns the position and dimensions of the region
... = Cooldown:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
enabled = Cooldown:GetReverse() - Returns whether the bright and dark portions of the cooldown animation should be inverted
right = Cooldown:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = Cooldown:GetScale() - Returns the frame's scale factor
handler = Cooldown:GetScript("scriptType") - Returns the widget's handler function for a script
width, height = Cooldown:GetSize() - Returns the width and height of the region
region = Cooldown:GetTitleRegion() - Returns the frame's TitleRegion object
top = Cooldown:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = Cooldown:GetWidth() - Returns the width of the region
hasScript = Cooldown:HasScript("scriptType") - Returns whether the widget supports a script handler
Cooldown:Hide() - Hides the region
Cooldown:HookScript("scriptType", handler) - Securely hooks a script handler
Cooldown:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = Cooldown:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = Cooldown:IsDragging() - Returns whether the region is currently being dragged
registered = Cooldown:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = Cooldown:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = Cooldown:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = Cooldown:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = Cooldown:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = Cooldown:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = Cooldown:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = Cooldown:IsMovable() - Returns whether the frame can be moved by the user
isType = Cooldown:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = Cooldown:IsProtected() - Returns whether the region is protected
enabled = Cooldown:IsResizable() - Returns whether the frame can be resized by the user
shown = Cooldown:IsShown() - Returns whether the region is shown
enabled = Cooldown:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = Cooldown:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = Cooldown:IsVisible() - Returns whether the region is visible
Cooldown:Lower() - Reduces the frame's frame level below all other frames in its strata
Cooldown:Raise() - Increases the frame's frame level above all other frames in its strata
Cooldown:RegisterAllEvents() - Registers the frame for all events
Cooldown:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
Cooldown:RegisterForDrag(...) - Registers the frame for dragging
Cooldown:SetAllPoints([region]) or Cooldown:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
Cooldown:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
Cooldown:SetAttribute("name", value) - Sets a secure frame attribute
Cooldown:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
Cooldown:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
Cooldown:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
Cooldown:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
Cooldown:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
Cooldown:SetCooldown(start, duration) - Sets up the parameters for a Cooldown model.
Cooldown:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
Cooldown:SetDontSavePosition() - This function is not yet documented
Cooldown:SetDrawEdge(enable) - Sets whether a bright line should be drawn on the moving edge of the cooldown animation
Cooldown:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
Cooldown:SetFrameStrata("strata") - Sets the general layering strata of the frame
Cooldown:SetHeight(height) - Sets the region's height
Cooldown:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
Cooldown:SetID(id) - Sets a numeric identifier for the frame
Cooldown:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
Cooldown:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
Cooldown:SetMovable(enable) - Sets whether the frame can be moved by the user
Cooldown:SetParent(frame) or Cooldown:SetParent("name") - Makes another frame the parent of this region
Cooldown:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
Cooldown:SetPropagateKeyboardInput() - This function is not yet documented
Cooldown:SetResizable(enable) - Sets whether the frame can be resized by the user
Cooldown:SetReverse(reverse) - Sets whether to invert the bright and dark portions of the cooldown animation
Cooldown:SetScale(scale) - Sets the frame's scale factor
Cooldown:SetScript("scriptType", handler) - Sets the widget's handler function for a script
Cooldown:SetSize(width, height) - Sets the size of the region to the specified values
Cooldown:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
Cooldown:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
Cooldown:SetWidth(width) - Sets the region's width
Cooldown:Show() - Shows the region
Cooldown:StartMoving() - Begins repositioning the frame via mouse movement
Cooldown:StartSizing() - Begins resizing the frame via mouse movement
Cooldown:StopAnimating() - Stops any active animations involving the region or its children
Cooldown:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
Cooldown:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
Cooldown:UnregisterEvent("event") - Unregisters the frame for an event
DressUpModel

DressUpModel:AdvanceTime() - Advances to the model's next animation frame
DressUpModel:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = DressUpModel:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = DressUpModel:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
DressUpModel:ClearAllPoints() - Removes all anchor points from the region
DressUpModel:ClearFog() - Disables fog display for the model.
DressUpModel:ClearModel() - Removes the 3D model currently displayed
animationGroup = DressUpModel:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = DressUpModel:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = DressUpModel:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = DressUpModel:CreateTitleRegion() - Creates a title region for dragging the frame
DressUpModel:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
DressUpModel:Dress() - Updates the model to reflect the character's currently equipped items
DressUpModel:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
DressUpModel:EnableJoystick(enable) - Enables or disables joystick interactivity
DressUpModel:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
DressUpModel:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
DressUpModel:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
alpha = DressUpModel:GetAlpha() - Returns the opacity of the region relative to its parent
... = DressUpModel:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = DressUpModel:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = DressUpModel:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = DressUpModel:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = DressUpModel:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = DressUpModel:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = DressUpModel:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = DressUpModel:GetCenter() - Returns the screen coordinates of the region's center
... = DressUpModel:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = DressUpModel:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = DressUpModel:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
DressUpModel:GetDontSavePosition() - This function is not yet documented
alpha = DressUpModel:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = DressUpModel:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = DressUpModel:GetEffectiveScale() - Returns the overall scale factor of the frame
facing = DressUpModel:GetFacing() - Returns the model's current rotation setting
red, green, blue = DressUpModel:GetFogColor() - Returns the model's current fog color
distance = DressUpModel:GetFogFar() - Returns the far clipping distance for the model's fog.
distance = DressUpModel:GetFogNear() - Returns the near clipping distance for the model's fog.
level = DressUpModel:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = DressUpModel:GetFrameStrata() - Returns the general layering strata of the frame
height = DressUpModel:GetHeight() - Returns the height of the region
left, right, top, bottom = DressUpModel:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = DressUpModel:GetID() - Returns the frame's numeric identifier
left = DressUpModel:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
enabled, omni, dirX, dirY, dirZ, ambIntensity, ambR, ambG, ambB, dirIntensity, dirR, dirG, dirB = DressUpModel:GetLight() - Returns properties of the light sources used when rendering the model
maxWidth, maxHeight = DressUpModel:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = DressUpModel:GetMinResize() - Returns the minimum size of the frame for user resizing
filename = DressUpModel:GetModel() - Returns the model file currently displayed
scale = DressUpModel:GetModelScale() - Returns the scale factor determining the size at which the 3D model appears
name = DressUpModel:GetName() - Returns the widget object's name
numChildren = DressUpModel:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = DressUpModel:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = DressUpModel:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = DressUpModel:GetObjectType() - Returns the object's widget type
parent = DressUpModel:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = DressUpModel:GetPoint(index) - Returns information about one of the region's anchor points
x, y, z = DressUpModel:GetPosition() - Returns the position of the 3D model within the frame
DressUpModel:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = DressUpModel:GetRect() - Returns the position and dimensions of the region
... = DressUpModel:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = DressUpModel:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = DressUpModel:GetScale() - Returns the frame's scale factor
handler = DressUpModel:GetScript("scriptType") - Returns the widget's handler function for a script
width, height = DressUpModel:GetSize() - Returns the width and height of the region
region = DressUpModel:GetTitleRegion() - Returns the frame's TitleRegion object
top = DressUpModel:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = DressUpModel:GetWidth() - Returns the width of the region
hasScript = DressUpModel:HasScript("scriptType") - Returns whether the widget supports a script handler
DressUpModel:Hide() - Hides the region
DressUpModel:HookScript("scriptType", handler) - Securely hooks a script handler
DressUpModel:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = DressUpModel:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = DressUpModel:IsDragging() - Returns whether the region is currently being dragged
registered = DressUpModel:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = DressUpModel:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = DressUpModel:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = DressUpModel:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = DressUpModel:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = DressUpModel:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = DressUpModel:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = DressUpModel:IsMovable() - Returns whether the frame can be moved by the user
isType = DressUpModel:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = DressUpModel:IsProtected() - Returns whether the region is protected
enabled = DressUpModel:IsResizable() - Returns whether the frame can be resized by the user
shown = DressUpModel:IsShown() - Returns whether the region is shown
enabled = DressUpModel:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = DressUpModel:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = DressUpModel:IsVisible() - Returns whether the region is visible
DressUpModel:Lower() - Reduces the frame's frame level below all other frames in its strata
DressUpModel:Raise() - Increases the frame's frame level above all other frames in its strata
DressUpModel:RefreshCamera() - This function is not yet documented
DressUpModel:RefreshUnit() - Updates the model's appearance to match that of its unit
DressUpModel:RegisterAllEvents() - Registers the frame for all events
DressUpModel:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
DressUpModel:RegisterForDrag(...) - Registers the frame for dragging
DressUpModel:ReplaceIconTexture("filename") - Sets the icon texture used by the model
DressUpModel:SetAllPoints([region]) or DressUpModel:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
DressUpModel:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
DressUpModel:SetAttribute("name", value) - Sets a secure frame attribute
DressUpModel:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
DressUpModel:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
DressUpModel:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
DressUpModel:SetBarberShopAlternateForm() - This function is not yet documented
DressUpModel:SetCamDistanceScale() - This function is not yet documented
DressUpModel:SetCamera(index) - Sets the view angle on the model to a pre-defined camera location
DressUpModel:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
DressUpModel:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
DressUpModel:SetCreature(creature) - Sets the model to display the 3D model of a specific creature
DressUpModel:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
DressUpModel:SetDisplayInfo() - This function is not yet documented
DressUpModel:SetDontSavePosition() - This function is not yet documented
DressUpModel:SetFacing(facing) - Sets the model's current rotation
DressUpModel:SetFogColor(red, green, blue) - Sets the model's fog color, enabling fog display if disabled
DressUpModel:SetFogFar(distance) - Sets the far clipping distance for the model's fog.
DressUpModel:SetFogNear(distance) - Sets the near clipping distance for the model's fog.
DressUpModel:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
DressUpModel:SetFrameStrata("strata") - Sets the general layering strata of the frame
DressUpModel:SetGlow(amount) - Sets the model's glow amount
DressUpModel:SetHeight(height) - Sets the region's height
DressUpModel:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
DressUpModel:SetID(id) - Sets a numeric identifier for the frame
DressUpModel:SetLight(enabled, omni, dirX, dirY, dirZ, ambIntensity [, ambR [, ambG [, ambB [, dirIntensity [, dirR [, dirG [, dirB]]]]]]]) - Sets properties of the light sources used when rendering the model
DressUpModel:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
DressUpModel:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
DressUpModel:SetModel("filename") - Sets the model file to be displayed
DressUpModel:SetModelScale(scale) - Sets the scale factor determining the size at which the 3D model appears
DressUpModel:SetMovable(enable) - Sets whether the frame can be moved by the user
DressUpModel:SetParent(frame) or DressUpModel:SetParent("name") - Makes another frame the parent of this region
DressUpModel:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
DressUpModel:SetPortraitZoom() - This function is not yet documented
DressUpModel:SetPosition(x, y, z) - Returns the position of the 3D model within the frame
DressUpModel:SetPropagateKeyboardInput() - This function is not yet documented
DressUpModel:SetResizable(enable) - Sets whether the frame can be resized by the user
DressUpModel:SetRotation(facing) - Sets the model's current rotation by animating the model
DressUpModel:SetScale(scale) - Sets the frame's scale factor
DressUpModel:SetScript("scriptType", handler) - Sets the widget's handler function for a script
DressUpModel:SetSequence(sequence) - Sets the animation sequence to be used by the model
DressUpModel:SetSequenceTime(sequence, time) - Sets the animation sequence and time index to be used by the model
DressUpModel:SetSize(width, height) - Sets the size of the region to the specified values
DressUpModel:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
DressUpModel:SetUnit("unit") - Sets the model to display the 3D model of a specific unit
DressUpModel:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
DressUpModel:SetWidth(width) - Sets the region's width
DressUpModel:Show() - Shows the region
DressUpModel:StartMoving() - Begins repositioning the frame via mouse movement
DressUpModel:StartSizing() - Begins resizing the frame via mouse movement
DressUpModel:StopAnimating() - Stops any active animations involving the region or its children
DressUpModel:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
DressUpModel:TryOn(itemID) or DressUpModel:TryOn("itemName") or DressUpModel:TryOn("itemLink") - Updates the model to reflect the character's appearance after equipping a specific item
DressUpModel:Undress() - Updates the model to reflect the character's appearance without any equipped items
DressUpModel:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
DressUpModel:UnregisterEvent("event") - Unregisters the frame for an event
EditBox

EditBox:AddHistoryLine("text") - Adds a line of text to the edit box's stored history
EditBox:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = EditBox:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = EditBox:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
EditBox:ClearAllPoints() - Removes all anchor points from the region
EditBox:ClearFocus() - Releases keyboard input focus from the edit box
EditBox:ClearHistory() - This function is not yet documented
animationGroup = EditBox:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = EditBox:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = EditBox:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = EditBox:CreateTitleRegion() - Creates a title region for dragging the frame
EditBox:Disable() - This function is not yet documented
EditBox:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
EditBox:Enable() - This function is not yet documented
EditBox:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
EditBox:EnableJoystick(enable) - Enables or disables joystick interactivity
EditBox:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
EditBox:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
EditBox:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
alpha = EditBox:GetAlpha() - Returns the opacity of the region relative to its parent
enabled = EditBox:GetAltArrowKeyMode() - Returns whether arrow keys are ignored by the edit box unless the Alt key is held
... = EditBox:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = EditBox:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = EditBox:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = EditBox:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = EditBox:GetBackdropColor() - Returns the shading color for the frame's background graphic
duration = EditBox:GetBlinkSpeed() - Returns the rate at which the text insertion blinks when the edit box is focused
bottom = EditBox:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = EditBox:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = EditBox:GetCenter() - Returns the screen coordinates of the region's center
... = EditBox:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = EditBox:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
position = EditBox:GetCursorPosition() - Returns the current cursor position inside edit box
depth = EditBox:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
EditBox:GetDontSavePosition() - This function is not yet documented
alpha = EditBox:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = EditBox:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = EditBox:GetEffectiveScale() - Returns the overall scale factor of the frame
filename, fontHeight, flags = EditBox:GetFont() - Returns the font instance's basic font properties
font = EditBox:GetFontObject() - Returns the `Font` object from which the font instance's properties are inherited
level = EditBox:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = EditBox:GetFrameStrata() - Returns the general layering strata of the frame
height = EditBox:GetHeight() - Returns the height of the region
count = EditBox:GetHistoryLines() - Returns the maximum number of history lines stored by the edit box
left, right, top, bottom = EditBox:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = EditBox:GetID() - Returns the frame's numeric identifier
indent = EditBox:GetIndentedWordWrap() - Returns whether long lines of text are indented when wrapping
language = EditBox:GetInputLanguage() - Returns the currently selected keyboard input language (character set / input method)
justify = EditBox:GetJustifyH() - Returns the font instance's horizontal text alignment style
justify = EditBox:GetJustifyV() - Returns the font instance's vertical text alignment style
left = EditBox:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
maxBytes = EditBox:GetMaxBytes() - Returns the maximum number of bytes of text allowed in the edit box
maxLetters = EditBox:GetMaxLetters() - Returns the maximum number of text characters allowed in the edit box
maxWidth, maxHeight = EditBox:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = EditBox:GetMinResize() - Returns the minimum size of the frame for user resizing
name = EditBox:GetName() - Returns the widget object's name
numChildren = EditBox:GetNumChildren() - Returns the number of child frames belonging to the frame
numLetters = EditBox:GetNumLetters() - Returns the number of text characters in the edit box
numPoints = EditBox:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = EditBox:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
num = EditBox:GetNumber() - Returns the contents of the edit box as a number
type = EditBox:GetObjectType() - Returns the object's widget type
parent = EditBox:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = EditBox:GetPoint(index) - Returns information about one of the region's anchor points
EditBox:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = EditBox:GetRect() - Returns the position and dimensions of the region
... = EditBox:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = EditBox:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = EditBox:GetScale() - Returns the frame's scale factor
handler = EditBox:GetScript("scriptType") - Returns the widget's handler function for a script
shadowR, shadowG, shadowB, shadowAlpha = EditBox:GetShadowColor() - Returns the color of the font's text shadow
xOffset, yOffset = EditBox:GetShadowOffset() - Returns the offset of the font instance's text shadow from its text
width, height = EditBox:GetSize() - Returns the width and height of the region
spacing = EditBox:GetSpacing() - Returns the font instance's amount of spacing between lines
text = EditBox:GetText() - Returns the edit box's text contents
textR, textG, textB, textAlpha = EditBox:GetTextColor() - Returns the font instance's default text color
left, right, top, bottom = EditBox:GetTextInsets() - Returns the insets from the edit box's edges which determine its interactive text area
region = EditBox:GetTitleRegion() - Returns the frame's TitleRegion object
top = EditBox:GetTop() - Returns the distance from the bottom of the screen to the top of the region
position = EditBox:GetUTF8CursorPosition() - Returns the cursor's numeric position in the edit box, taking UTF-8 multi-byte character into account
width = EditBox:GetWidth() - Returns the width of the region
enabled = EditBox:HasFocus() - Returns whether the edit box is currently focused for keyboard input
hasScript = EditBox:HasScript("scriptType") - Returns whether the widget supports a script handler
EditBox:Hide() - Hides the region
EditBox:HighlightText([start [, end]]) - Selects all or a portion of the text in the edit box
EditBox:HookScript("scriptType", handler) - Securely hooks a script handler
EditBox:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
EditBox:Insert("text") - Inserts text into the edit box at the current cursor position
enabled = EditBox:IsAutoFocus() - Returns whether the edit box automatically acquires keyboard input focus
enabled = EditBox:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
EditBox:IsCountInvisibleLetters() - This function is not yet documented
isDragging = EditBox:IsDragging() - Returns whether the region is currently being dragged
EditBox:IsEnabled() - This function is not yet documented
registered = EditBox:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = EditBox:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = EditBox:IsInIMECompositionMode() - Returns whether the edit box is in Input Method Editor composition mode
enabled = EditBox:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = EditBox:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = EditBox:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = EditBox:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = EditBox:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = EditBox:IsMovable() - Returns whether the frame can be moved by the user
multiLine = EditBox:IsMultiLine() - Returns whether the edit box shows more than one line of text
enabled = EditBox:IsNumeric() - Returns whether the edit box only accepts numeric input
isType = EditBox:IsObjectType("type") - Returns whether the object belongs to a given widget type
enabled = EditBox:IsPassword() - Returns whether the text entered in the edit box is masked
isProtected, explicit = EditBox:IsProtected() - Returns whether the region is protected
enabled = EditBox:IsResizable() - Returns whether the frame can be resized by the user
shown = EditBox:IsShown() - Returns whether the region is shown
enabled = EditBox:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = EditBox:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = EditBox:IsVisible() - Returns whether the region is visible
EditBox:Lower() - Reduces the frame's frame level below all other frames in its strata
EditBox:Raise() - Increases the frame's frame level above all other frames in its strata
EditBox:RegisterAllEvents() - Registers the frame for all events
EditBox:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
EditBox:RegisterForDrag(...) - Registers the frame for dragging
EditBox:SetAllPoints([region]) or EditBox:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
EditBox:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
EditBox:SetAltArrowKeyMode(enable) - Sets whether arrow keys are ignored by the edit box unless the Alt key is held
EditBox:SetAttribute("name", value) - Sets a secure frame attribute
EditBox:SetAutoFocus(enable) - Sets whether the edit box automatically acquires keyboard input focus
EditBox:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
EditBox:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
EditBox:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
EditBox:SetBlinkSpeed(duration) - Sets the rate at which the text insertion blinks when the edit box is focused
EditBox:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
EditBox:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
EditBox:SetCountInvisibleLetters() - This function is not yet documented
EditBox:SetCursorPosition(position) - Sets the cursor position in the edit box
EditBox:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
EditBox:SetDontSavePosition() - This function is not yet documented
EditBox:SetFocus() - Focuses the edit box for keyboard input
isValid = EditBox:SetFont("filename", fontHeight, "flags") - Sets the font instance's basic font properties
EditBox:SetFontObject(object) or EditBox:SetFontObject("name") - Sets the `Font` object from which the font instance's properties are inherited
EditBox:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
EditBox:SetFrameStrata("strata") - Sets the general layering strata of the frame
EditBox:SetHeight(height) - Sets the region's height
EditBox:SetHistoryLines(count) - Sets the maximum number of history lines stored by the edit box
EditBox:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
EditBox:SetID(id) - Sets a numeric identifier for the frame
EditBox:SetIndentedWordWrap(indent) - Sets whether long lines of text are indented when wrapping
EditBox:SetJustifyH("justify") - Sets the font instance's horizontal text alignment style
EditBox:SetJustifyV("justify") - Sets the font instance's vertical text alignment style
EditBox:SetMaxBytes(maxBytes) - Sets the maximum number of bytes of text allowed in the edit box
EditBox:SetMaxLetters(maxLetters) - Sets the maximum number of text characters allowed in the edit box
EditBox:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
EditBox:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
EditBox:SetMovable(enable) - Sets whether the frame can be moved by the user
EditBox:SetMultiLine(multiLine) - Sets whether the edit box shows more than one line of text
EditBox:SetNumber(num) - Sets the contents of the edit box to a number
EditBox:SetNumeric(enable) - Sets whether the edit box only accepts numeric input
EditBox:SetParent(frame) or EditBox:SetParent("name") - Makes another frame the parent of this region
EditBox:SetPassword(enable) - Sets whether the text entered in the edit box is masked
EditBox:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
EditBox:SetPropagateKeyboardInput() - This function is not yet documented
EditBox:SetResizable(enable) - Sets whether the frame can be resized by the user
EditBox:SetScale(scale) - Sets the frame's scale factor
EditBox:SetScript("scriptType", handler) - Sets the widget's handler function for a script
EditBox:SetShadowColor(shadowR, shadowG, shadowB, shadowAlpha) - Sets the color of the font's text shadow
EditBox:SetShadowOffset(xOffset, yOffset) - Sets the offset of the font instance's text shadow from its text
EditBox:SetSize(width, height) - Sets the size of the region to the specified values
EditBox:SetSpacing(spacing) - Sets the font instance's amount of spacing between lines
EditBox:SetText("text") - Sets the edit box's text contents
EditBox:SetTextColor(textR, textG, textB, textAlpha) - Sets the font instance's default text color
EditBox:SetTextInsets(left, right, top, bottom) - Sets the insets from the edit box's edges which determine its interactive text area
EditBox:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
EditBox:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
EditBox:SetWidth(width) - Sets the region's width
EditBox:Show() - Shows the region
EditBox:StartMoving() - Begins repositioning the frame via mouse movement
EditBox:StartSizing() - Begins resizing the frame via mouse movement
EditBox:StopAnimating() - Stops any active animations involving the region or its children
EditBox:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
EditBox:ToggleInputLanguage() - Switches the edit box's language input mode
EditBox:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
EditBox:UnregisterEvent("event") - Unregisters the frame for an event
Font

Font:CopyFontObject(object) or Font:CopyFontObject("name") - Sets the font's properties to match those of another Font object
alpha = Font:GetAlpha() - Returns the opacity for text displayed by the font
filename, fontHeight, flags = Font:GetFont() - Returns the font instance's basic font properties
font = Font:GetFontObject() - Returns the `Font` object from which the font instance's properties are inherited
Font:GetIndentedWordWrap() - This function is not yet documented
justify = Font:GetJustifyH() - Returns the font instance's horizontal text alignment style
justify = Font:GetJustifyV() - Returns the font instance's vertical text alignment style
name = Font:GetName() - Returns the widget object's name
type = Font:GetObjectType() - Returns the object's widget type
shadowR, shadowG, shadowB, shadowAlpha = Font:GetShadowColor() - Returns the color of the font's text shadow
xOffset, yOffset = Font:GetShadowOffset() - Returns the offset of the font instance's text shadow from its text
spacing = Font:GetSpacing() - Returns the font instance's amount of spacing between lines
textR, textG, textB, textAlpha = Font:GetTextColor() - Returns the font instance's default text color
isType = Font:IsObjectType("type") - Returns whether the object belongs to a given widget type
Font:SetAlpha(alpha) - Sets the opacity for text displayed by the font
isValid = Font:SetFont("filename", fontHeight, "flags") - Sets the font instance's basic font properties
Font:SetFontObject(object) or Font:SetFontObject("name") - Sets the `Font` object from which the font instance's properties are inherited
Font:SetIndentedWordWrap() - This function is not yet documented
Font:SetJustifyH("justify") - Sets the font instance's horizontal text alignment style
Font:SetJustifyV("justify") - Sets the font instance's vertical text alignment style
Font:SetShadowColor(shadowR, shadowG, shadowB, shadowAlpha) - Sets the color of the font's text shadow
Font:SetShadowOffset(xOffset, yOffset) - Sets the offset of the font instance's text shadow from its text
Font:SetSpacing(spacing) - Sets the font instance's amount of spacing between lines
Font:SetTextColor(textR, textG, textB, textAlpha) - Sets the font instance's default text color
FontInstance

filename, fontHeight, flags = FontInstance:GetFont() - Returns the font instance's basic font properties
font = FontInstance:GetFontObject() - Returns the `Font` object from which the font instance's properties are inherited
justify = FontInstance:GetJustifyH() - Returns the font instance's horizontal text alignment style
justify = FontInstance:GetJustifyV() - Returns the font instance's vertical text alignment style
name = FontInstance:GetName() - Returns the widget object's name
type = FontInstance:GetObjectType() - Returns the object's widget type
shadowR, shadowG, shadowB, shadowAlpha = FontInstance:GetShadowColor() - Returns the color of the font's text shadow
xOffset, yOffset = FontInstance:GetShadowOffset() - Returns the offset of the font instance's text shadow from its text
spacing = FontInstance:GetSpacing() - Returns the font instance's amount of spacing between lines
textR, textG, textB, textAlpha = FontInstance:GetTextColor() - Returns the font instance's default text color
isType = FontInstance:IsObjectType("type") - Returns whether the object belongs to a given widget type
isValid = FontInstance:SetFont("filename", fontHeight, "flags") - Sets the font instance's basic font properties
FontInstance:SetFontObject(object) or FontInstance:SetFontObject("name") - Sets the `Font` object from which the font instance's properties are inherited
FontInstance:SetJustifyH("justify") - Sets the font instance's horizontal text alignment style
FontInstance:SetJustifyV("justify") - Sets the font instance's vertical text alignment style
FontInstance:SetShadowColor(shadowR, shadowG, shadowB, shadowAlpha) - Sets the color of the font's text shadow
FontInstance:SetShadowOffset(xOffset, yOffset) - Sets the offset of the font instance's text shadow from its text
FontInstance:SetSpacing(spacing) - Sets the font instance's amount of spacing between lines
FontInstance:SetTextColor(textR, textG, textB, textAlpha) - Sets the font instance's default text color
FontString

canChange = FontString:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
enabled = FontString:CanNonSpaceWrap() - Returns whether long lines of text will wrap within or between words
enabled = FontString:CanWordWrap() - Returns whether long lines of text in the font string can wrap onto subsequent lines
FontString:ClearAllPoints() - Removes all anchor points from the region
animationGroup = FontString:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
alpha = FontString:GetAlpha() - Returns the opacity of the region relative to its parent
... = FontString:GetAnimationGroups() - Returns a list of animation groups belonging to the region
bottom = FontString:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
x, y = FontString:GetCenter() - Returns the screen coordinates of the region's center
layer, sublayer = FontString:GetDrawLayer() - Returns the layer at which the region's graphics are drawn relative to others in its frame
FontString:GetFieldSize() - This function is not yet documented
filename, fontHeight, flags = FontString:GetFont() - Returns the font instance's basic font properties
font = FontString:GetFontObject() - Returns the `Font` object from which the font instance's properties are inherited
height = FontString:GetHeight() - Returns the height of the region
FontString:GetIndentedWordWrap() - This function is not yet documented
justify = FontString:GetJustifyH() - Returns the font instance's horizontal text alignment style
justify = FontString:GetJustifyV() - Returns the font instance's vertical text alignment style
left = FontString:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
FontString:GetMaxLines() - This function is not yet documented
name = FontString:GetName() - Returns the widget object's name
numPoints = FontString:GetNumPoints() - Returns the number of anchor points defined for the region
type = FontString:GetObjectType() - Returns the object's widget type
parent = FontString:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = FontString:GetPoint(index) - Returns information about one of the region's anchor points
left, bottom, width, height = FontString:GetRect() - Returns the position and dimensions of the region
right = FontString:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
shadowR, shadowG, shadowB, shadowAlpha = FontString:GetShadowColor() - Returns the color of the font's text shadow
xOffset, yOffset = FontString:GetShadowOffset() - Returns the offset of the font instance's text shadow from its text
width, height = FontString:GetSize() - Returns the width and height of the region
spacing = FontString:GetSpacing() - Returns the font instance's amount of spacing between lines
height = FontString:GetStringHeight() - Returns the height of the text displayed in the font string
width = FontString:GetStringWidth() - Returns the width of the text displayed in the font string
text = FontString:GetText() - Returns the text currently set for display in the font string
textR, textG, textB, textAlpha = FontString:GetTextColor() - Returns the font instance's default text color
top = FontString:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = FontString:GetWidth() - Returns the width of the region
FontString:GetWrappedWidth() - This function is not yet documented
FontString:Hide() - Hides the region
isDragging = FontString:IsDragging() - Returns whether the region is currently being dragged
isOver = FontString:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
isType = FontString:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = FontString:IsProtected() - Returns whether the region is protected
shown = FontString:IsShown() - Returns whether the region is shown
FontString:IsTruncated() - This function is not yet documented
visible = FontString:IsVisible() - Returns whether the region is visible
FontString:SetAllPoints([region]) or FontString:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
FontString:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
FontString:SetAlphaGradient(start, length) - Creates an opacity gradient over the text in the font string
FontString:SetDrawLayer("layer", sublayer) - Sets the layer at which the region's graphics are drawn relative to others in its frame
isValid = FontString:SetFont("filename", fontHeight, "flags") - Sets the font instance's basic font properties
FontString:SetFontObject(object) or FontString:SetFontObject("name") - Sets the `Font` object from which the font instance's properties are inherited
FontString:SetFormattedText("formatString", ...) - Sets the text displayed in the font string using format specifiers
FontString:SetHeight(height) - Sets the region's height
FontString:SetIndentedWordWrap() - This function is not yet documented
FontString:SetJustifyH("justify") - Sets the font instance's horizontal text alignment style
FontString:SetJustifyV("justify") - Sets the font instance's vertical text alignment style
FontString:SetMaxLines() - This function is not yet documented
FontString:SetNonSpaceWrap(enable) - Sets whether long lines of text will wrap within or between words
FontString:SetParent(frame) or FontString:SetParent("name") - Makes another frame the parent of this region
FontString:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
FontString:SetShadowColor(shadowR, shadowG, shadowB, shadowAlpha) - Sets the color of the font's text shadow
FontString:SetShadowOffset(xOffset, yOffset) - Sets the offset of the font instance's text shadow from its text
FontString:SetSize(width, height) - Sets the size of the region to the specified values
FontString:SetSpacing(spacing) - Sets the font instance's amount of spacing between lines
FontString:SetText("text") - Sets the text to be displayed in the font string
FontString:SetTextColor(textR, textG, textB, textAlpha) - Sets the font instance's default text color
FontString:SetTextHeight(height) - Scales the font string's rendered text to a different height
FontString:SetVertexColor(red, green, blue [, alpha]) - Sets a color shading for the region's graphics
FontString:SetWidth(width) - Sets the region's width
FontString:SetWordWrap(enable) - Sets whether long lines of text in the font string can wrap onto subsequent lines
FontString:Show() - Shows the region
FontString:StopAnimating() - Stops any active animations involving the region or its children
Frame

Frame:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = Frame:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = Frame:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
Frame:ClearAllPoints() - Removes all anchor points from the region
animationGroup = Frame:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = Frame:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = Frame:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = Frame:CreateTitleRegion() - Creates a title region for dragging the frame
Frame:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
Frame:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
Frame:EnableJoystick(enable) - Enables or disables joystick interactivity
Frame:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
Frame:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
Frame:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
alpha = Frame:GetAlpha() - Returns the opacity of the region relative to its parent
... = Frame:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = Frame:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = Frame:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = Frame:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = Frame:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = Frame:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = Frame:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = Frame:GetCenter() - Returns the screen coordinates of the region's center
... = Frame:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = Frame:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = Frame:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
Frame:GetDontSavePosition() - This function is not yet documented
alpha = Frame:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = Frame:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = Frame:GetEffectiveScale() - Returns the overall scale factor of the frame
level = Frame:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = Frame:GetFrameStrata() - Returns the general layering strata of the frame
height = Frame:GetHeight() - Returns the height of the region
left, right, top, bottom = Frame:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = Frame:GetID() - Returns the frame's numeric identifier
left = Frame:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
maxWidth, maxHeight = Frame:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = Frame:GetMinResize() - Returns the minimum size of the frame for user resizing
name = Frame:GetName() - Returns the widget object's name
numChildren = Frame:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = Frame:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = Frame:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = Frame:GetObjectType() - Returns the object's widget type
parent = Frame:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = Frame:GetPoint(index) - Returns information about one of the region's anchor points
Frame:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = Frame:GetRect() - Returns the position and dimensions of the region
... = Frame:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = Frame:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = Frame:GetScale() - Returns the frame's scale factor
handler = Frame:GetScript("scriptType") - Returns the widget's handler function for a script
width, height = Frame:GetSize() - Returns the width and height of the region
region = Frame:GetTitleRegion() - Returns the frame's TitleRegion object
top = Frame:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = Frame:GetWidth() - Returns the width of the region
hasScript = Frame:HasScript("scriptType") - Returns whether the widget supports a script handler
Frame:Hide() - Hides the region
Frame:HookScript("scriptType", handler) - Securely hooks a script handler
Frame:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = Frame:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = Frame:IsDragging() - Returns whether the region is currently being dragged
registered = Frame:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = Frame:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = Frame:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = Frame:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = Frame:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = Frame:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = Frame:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = Frame:IsMovable() - Returns whether the frame can be moved by the user
isType = Frame:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = Frame:IsProtected() - Returns whether the region is protected
enabled = Frame:IsResizable() - Returns whether the frame can be resized by the user
shown = Frame:IsShown() - Returns whether the region is shown
enabled = Frame:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = Frame:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = Frame:IsVisible() - Returns whether the region is visible
Frame:Lower() - Reduces the frame's frame level below all other frames in its strata
Frame:Raise() - Increases the frame's frame level above all other frames in its strata
Frame:RegisterAllEvents() - Registers the frame for all events
Frame:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
Frame:RegisterForDrag(...) - Registers the frame for dragging
Frame:SetAllPoints([region]) or Frame:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
Frame:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
Frame:SetAttribute("name", value) - Sets a secure frame attribute
Frame:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
Frame:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
Frame:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
Frame:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
Frame:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
Frame:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
Frame:SetDontSavePosition() - This function is not yet documented
Frame:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
Frame:SetFrameStrata("strata") - Sets the general layering strata of the frame
Frame:SetHeight(height) - Sets the region's height
Frame:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
Frame:SetID(id) - Sets a numeric identifier for the frame
Frame:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
Frame:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
Frame:SetMovable(enable) - Sets whether the frame can be moved by the user
Frame:SetParent(frame) or Frame:SetParent("name") - Makes another frame the parent of this region
Frame:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
Frame:SetPropagateKeyboardInput() - This function is not yet documented
Frame:SetResizable(enable) - Sets whether the frame can be resized by the user
Frame:SetScale(scale) - Sets the frame's scale factor
Frame:SetScript("scriptType", handler) - Sets the widget's handler function for a script
Frame:SetSize(width, height) - Sets the size of the region to the specified values
Frame:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
Frame:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
Frame:SetWidth(width) - Sets the region's width
Frame:Show() - Shows the region
Frame:StartMoving() - Begins repositioning the frame via mouse movement
Frame:StartSizing() - Begins resizing the frame via mouse movement
Frame:StopAnimating() - Stops any active animations involving the region or its children
Frame:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
Frame:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
Frame:UnregisterEvent("event") - Unregisters the frame for an event
GameTooltip

GameTooltip:AddDoubleLine("textLeft", "textRight" [, rL [, gL [, bL [, rR [, gR [, bR]]]]]]) - Adds a line to the tooltip with both left-side and right-side portions
GameTooltip:AddFontStrings(left, right) - Adds `FontString` objects to the tooltip, allowing it to display an additional line of text
GameTooltip:AddLine("text" [, r [, g [, b [, wrap]]]]) - Adds a line of text to the tooltip
GameTooltip:AddSpellByID() - This function is not yet documented
GameTooltip:AddTexture("texture") - Adds a texture to the last tooltip line
GameTooltip:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
GameTooltip:AppendText("text") - Adds text to the first line of the tooltip
enabled = GameTooltip:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = GameTooltip:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
GameTooltip:ClearAllPoints() - Removes all anchor points from the region
GameTooltip:ClearLines() - Clears the tooltip's contents
animationGroup = GameTooltip:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = GameTooltip:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = GameTooltip:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = GameTooltip:CreateTitleRegion() - Creates a title region for dragging the frame
GameTooltip:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
GameTooltip:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
GameTooltip:EnableJoystick(enable) - Enables or disables joystick interactivity
GameTooltip:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
GameTooltip:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
GameTooltip:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
GameTooltip:FadeOut() - Causes the tooltip to begin fading out
alpha = GameTooltip:GetAlpha() - Returns the opacity of the region relative to its parent
anchor = GameTooltip:GetAnchorType() - Returns the method for anchoring the tooltip relative to its owner
... = GameTooltip:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = GameTooltip:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = GameTooltip:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = GameTooltip:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = GameTooltip:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = GameTooltip:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = GameTooltip:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = GameTooltip:GetCenter() - Returns the screen coordinates of the region's center
... = GameTooltip:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = GameTooltip:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = GameTooltip:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
GameTooltip:GetDontSavePosition() - This function is not yet documented
alpha = GameTooltip:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = GameTooltip:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = GameTooltip:GetEffectiveScale() - Returns the overall scale factor of the frame
level = GameTooltip:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = GameTooltip:GetFrameStrata() - Returns the general layering strata of the frame
height = GameTooltip:GetHeight() - Returns the height of the region
left, right, top, bottom = GameTooltip:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = GameTooltip:GetID() - Returns the frame's numeric identifier
name, link = GameTooltip:GetItem() - Returns the name and hyperlink for the item displayed in the tooltip
left = GameTooltip:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
maxWidth, maxHeight = GameTooltip:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = GameTooltip:GetMinResize() - Returns the minimum size of the frame for user resizing
width = GameTooltip:GetMinimumWidth() - Returns the minimum width of the tooltip
name = GameTooltip:GetName() - Returns the widget object's name
numChildren = GameTooltip:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = GameTooltip:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = GameTooltip:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = GameTooltip:GetObjectType() - Returns the object's widget type
owner = GameTooltip:GetOwner() - Returns the frame to which the tooltip refers and is anchored
padding = GameTooltip:GetPadding() - Returns the amount of space between tooltip's text and its right-side edge
parent = GameTooltip:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = GameTooltip:GetPoint(index) - Returns information about one of the region's anchor points
GameTooltip:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = GameTooltip:GetRect() - Returns the position and dimensions of the region
... = GameTooltip:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = GameTooltip:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = GameTooltip:GetScale() - Returns the frame's scale factor
handler = GameTooltip:GetScript("scriptType") - Returns the widget's handler function for a script
width, height = GameTooltip:GetSize() - Returns the width and height of the region
spellName, spellRank, spellID = GameTooltip:GetSpell() - Returns information about the spell displayed in the tooltip
region = GameTooltip:GetTitleRegion() - Returns the frame's TitleRegion object
top = GameTooltip:GetTop() - Returns the distance from the bottom of the screen to the top of the region
name, unit = GameTooltip:GetUnit() - Returns information about the unit displayed in the tooltip
width = GameTooltip:GetWidth() - Returns the width of the region
hasScript = GameTooltip:HasScript("scriptType") - Returns whether the widget supports a script handler
GameTooltip:Hide() - Hides the region
GameTooltip:HookScript("scriptType", handler) - Securely hooks a script handler
GameTooltip:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = GameTooltip:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = GameTooltip:IsDragging() - Returns whether the region is currently being dragged
enabled = GameTooltip:IsEquippedItem() - Returns whether the tooltip is displaying an item currently equipped by the player
registered = GameTooltip:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = GameTooltip:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = GameTooltip:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = GameTooltip:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = GameTooltip:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = GameTooltip:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = GameTooltip:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = GameTooltip:IsMovable() - Returns whether the frame can be moved by the user
isType = GameTooltip:IsObjectType("type") - Returns whether the object belongs to a given widget type
hasOwner = GameTooltip:IsOwned() - Returns whether the tooltip has an owner frame
isProtected, explicit = GameTooltip:IsProtected() - Returns whether the region is protected
enabled = GameTooltip:IsResizable() - Returns whether the frame can be resized by the user
shown = GameTooltip:IsShown() - Returns whether the region is shown
enabled = GameTooltip:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
isUnit = GameTooltip:IsUnit("unit") - Returns whether the tooltip is displaying information for a given unit
enabled = GameTooltip:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = GameTooltip:IsVisible() - Returns whether the region is visible
GameTooltip:Lower() - Reduces the frame's frame level below all other frames in its strata
numLines = GameTooltip:NumLines() - Returns the number of lines of text currently shown in the tooltip
GameTooltip:Raise() - Increases the frame's frame level above all other frames in its strata
GameTooltip:RegisterAllEvents() - Registers the frame for all events
GameTooltip:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
GameTooltip:RegisterForDrag(...) - Registers the frame for dragging
GameTooltip:SetAction(slot) - Fills the tooltip with information about the contents of an action slot
GameTooltip:SetAllPoints([region]) or GameTooltip:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
GameTooltip:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
GameTooltip:SetAnchorType("anchor" [, xOffset [, yOffset]]) - Sets the method for anchoring the tooltip relative to its owner
GameTooltip:SetAttribute("name", value) - Sets a secure frame attribute
GameTooltip:SetAuctionItem("list", index) - Fills the tooltip with information about an item in the auction house
GameTooltip:SetAuctionSellItem() - Fills the tooltip with information about the item currently being set up for auction
GameTooltip:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
GameTooltip:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
GameTooltip:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
GameTooltip:SetBackpackToken(index) - Fills the tooltip with information about a currency marked for watching on the Backpack UI
hasCooldown, repairCost = GameTooltip:SetBagItem(container, slot) - Fills the tooltip with information about an item in the player's bags
GameTooltip:SetBuybackItem(index) - Fills the tooltip with information about item recently sold to a vendor and available to be repurchased
GameTooltip:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
GameTooltip:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
GameTooltip:SetCurrencyByID() - This function is not yet documented
GameTooltip:SetCurrencyToken(index) - Fills the tooltip with information about a special currency type
GameTooltip:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
GameTooltip:SetDontSavePosition() - This function is not yet documented
GameTooltip:SetEquipmentSet("name") - Fills the tooltip with information about an equipment set
GameTooltip:SetExistingSocketGem(index, toDestroy) - Fills the tooltip with information about a permanently socketed gem
GameTooltip:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
GameTooltip:SetFrameStack(includeHidden) - Fills the tooltip with a list of frames under the mouse cursor
GameTooltip:SetFrameStrata("strata") - Sets the general layering strata of the frame
GameTooltip:SetGlyph(socket, talentGroup) - Fills the tooltip with information about one of the player's glyphs
GameTooltip:SetGlyphByID() - This function is not yet documented
GameTooltip:SetGuildBankItem(tab, slot) - Fills the tooltip with information about an item in the guild bank
GameTooltip:SetHeight(height) - Sets the region's height
GameTooltip:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
GameTooltip:SetHyperlink("hyperlink") - Fills the tooltip with information about an item, quest, spell, or other entity represented by a hyperlink
success = GameTooltip:SetHyperlinkCompareItem("hyperlink" [, index]) - Fills the tooltip with information about the item currently equipped in the slot used the supplied item
GameTooltip:SetID(id) - Sets a numeric identifier for the frame
GameTooltip:SetInboxItem(mailID, attachmentIndex) - Fills the tooltip with information about an item attached to a message in the player's inbox
GameTooltip:SetInstanceLockEncountersComplete() - This function is not yet documented
hasItem, hasCooldown, repairCost = GameTooltip:SetInventoryItem("unit", slot [, nameOnly]) - Fills the tooltip with information about an equipped item
GameTooltip:SetInventoryItemByID() - This function is not yet documented
GameTooltip:SetLFGCompletionReward() - This function is not yet documented
GameTooltip:SetLFGDungeonReward() - This function is not yet documented
GameTooltip:SetLFGDungeonShortageReward() - This function is not yet documented
GameTooltip:SetLootCurrency() - This function is not yet documented
GameTooltip:SetLootItem(slot) - Fills the tooltip with information about an item available as loot
GameTooltip:SetLootRollItem(id) - Fills the tooltip with information about an item currently up for loot rolling
GameTooltip:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
GameTooltip:SetMerchantCostItem(index, currency) - Fills the tooltip with information about an alternate currency required to purchase an item from a vendor
GameTooltip:SetMerchantItem(merchantIndex) - Fills the tooltip with information about an item available for purchase from a vendor
GameTooltip:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
GameTooltip:SetMinimumWidth(width) - Sets the minimum width of the tooltip
GameTooltip:SetMovable(enable) - Sets whether the frame can be moved by the user
GameTooltip:SetOwner(frame [, "anchorType" [, xOffset [, yOffset]]]) - Sets the frame to which the tooltip refers and is anchored
GameTooltip:SetPadding(padding) - Sets the amount of space between tooltip's text and its right-side edge
GameTooltip:SetParent(frame) or GameTooltip:SetParent("name") - Makes another frame the parent of this region
GameTooltip:SetPetAction(index) - Fills the tooltip with information about a pet action
GameTooltip:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
GameTooltip:SetPossession(index) - Fills the tooltip with information about one of the special actions available while the player possesses another unit
GameTooltip:SetPropagateKeyboardInput() - This function is not yet documented
GameTooltip:SetQuestCurrency() - This function is not yet documented
GameTooltip:SetQuestItem("itemType", index) - Fills the tooltip with information about an item in a questgiver dialog
GameTooltip:SetQuestLogCurrency() - This function is not yet documented
GameTooltip:SetQuestLogItem("itemType", index) - Fills the tooltip with information about an item related to the selected quest in the quest log
GameTooltip:SetQuestLogRewardSpell() - Fills the tooltip with information about the reward spell for the selected quest in the quest log
GameTooltip:SetQuestLogSpecialItem(questIndex) - Fills the tooltip with information about a usable item associated with a current quest
GameTooltip:SetQuestRewardSpell() - Fills the tooltip with information about the spell reward in a questgiver dialog
GameTooltip:SetReforgeItem() - This function is not yet documented
GameTooltip:SetResizable(enable) - Sets whether the frame can be resized by the user
GameTooltip:SetScale(scale) - Sets the frame's scale factor
GameTooltip:SetScript("scriptType", handler) - Sets the widget's handler function for a script
GameTooltip:SetSendMailItem(slot) - Fills the tooltip with information about an item attached to the outgoing mail message
GameTooltip:SetShapeshift(index) - Fills the tooltip with information about an ability on the stance/shapeshift bar
GameTooltip:SetSize(width, height) - Sets the size of the region to the specified values
GameTooltip:SetSocketGem(index) - Fills the tooltip with information about a gem added to a socket
GameTooltip:SetSocketedItem() - Fills the tooltip with information about the item currently being socketed
GameTooltip:SetSpellBookItem() - This function is not yet documented
GameTooltip:SetSpellByID(id) - Fills the tooltip with information about a spell specified by ID
GameTooltip:SetTalent(tabIndex, talentIndex, inspect, pet, talentGroup) - Fills the tooltip with information about a talent
GameTooltip:SetText("text" [, r [, g [, b [, a]]]]) - Sets the tooltip's text
GameTooltip:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
GameTooltip:SetTotem(slot) - Fills the tooltip with information about one of the player's active totems.
GameTooltip:SetTradePlayerItem(index) - Fills the tooltip with information about an item offered for trade by the player
GameTooltip:SetTradeSkillItem(skillIndex [, reagentIndex]) - Fills the tooltip with information about an item created by a trade skill recipe or a reagent in the recipe
GameTooltip:SetTradeTargetItem(index) - Fills the tooltip with information about an item offered for trade by the target
GameTooltip:SetTrainerService(index) - Fills the tooltip with information about a trainer service
GameTooltip:SetUnit("unit") - Fills the tooltip with information about a unit
GameTooltip:SetUnitAura("unit", index [, "filter"]) - Fills the tooltip with information about a buff or debuff on a unit
GameTooltip:SetUnitBuff("unit", index [, "filter"]) - Fills the tooltip with information about a buff on a unit
GameTooltip:SetUnitDebuff("unit", index [, "filter"]) - Fills the tooltip with information about a debuff on a unit
GameTooltip:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
GameTooltip:SetWidth(width) - Sets the region's width
GameTooltip:Show() - Shows the region
GameTooltip:StartMoving() - Begins repositioning the frame via mouse movement
GameTooltip:StartSizing() - Begins resizing the frame via mouse movement
GameTooltip:StopAnimating() - Stops any active animations involving the region or its children
GameTooltip:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
GameTooltip:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
GameTooltip:UnregisterEvent("event") - Unregisters the frame for an event
LayeredRegion

canChange = LayeredRegion:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
LayeredRegion:ClearAllPoints() - Removes all anchor points from the region
animationGroup = LayeredRegion:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
alpha = LayeredRegion:GetAlpha() - Returns the opacity of the region relative to its parent
... = LayeredRegion:GetAnimationGroups() - Returns a list of animation groups belonging to the region
bottom = LayeredRegion:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
x, y = LayeredRegion:GetCenter() - Returns the screen coordinates of the region's center
layer, sublayer = LayeredRegion:GetDrawLayer() - Returns the layer at which the region's graphics are drawn relative to others in its frame
height = LayeredRegion:GetHeight() - Returns the height of the region
left = LayeredRegion:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
name = LayeredRegion:GetName() - Returns the widget object's name
numPoints = LayeredRegion:GetNumPoints() - Returns the number of anchor points defined for the region
type = LayeredRegion:GetObjectType() - Returns the object's widget type
parent = LayeredRegion:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = LayeredRegion:GetPoint(index) - Returns information about one of the region's anchor points
left, bottom, width, height = LayeredRegion:GetRect() - Returns the position and dimensions of the region
right = LayeredRegion:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
width, height = LayeredRegion:GetSize() - Returns the width and height of the region
top = LayeredRegion:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = LayeredRegion:GetWidth() - Returns the width of the region
LayeredRegion:Hide() - Hides the region
isDragging = LayeredRegion:IsDragging() - Returns whether the region is currently being dragged
isOver = LayeredRegion:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
isType = LayeredRegion:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = LayeredRegion:IsProtected() - Returns whether the region is protected
shown = LayeredRegion:IsShown() - Returns whether the region is shown
visible = LayeredRegion:IsVisible() - Returns whether the region is visible
LayeredRegion:SetAllPoints([region]) or LayeredRegion:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
LayeredRegion:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
LayeredRegion:SetDrawLayer("layer", sublayer) - Sets the layer at which the region's graphics are drawn relative to others in its frame
LayeredRegion:SetHeight(height) - Sets the region's height
LayeredRegion:SetParent(frame) or LayeredRegion:SetParent("name") - Makes another frame the parent of this region
LayeredRegion:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
LayeredRegion:SetSize(width, height) - Sets the size of the region to the specified values
LayeredRegion:SetVertexColor(red, green, blue [, alpha]) - Sets a color shading for the region's graphics
LayeredRegion:SetWidth(width) - Sets the region's width
LayeredRegion:Show() - Shows the region
LayeredRegion:StopAnimating() - Stops any active animations involving the region or its children
MessageFrame

MessageFrame:AddMessage("text" [, red [, green [, blue [, alpha]]]]) - Adds a message to those listed in the frame
MessageFrame:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = MessageFrame:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = MessageFrame:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
MessageFrame:Clear() - Removes all messages displayed in the frame
MessageFrame:ClearAllPoints() - Removes all anchor points from the region
animationGroup = MessageFrame:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = MessageFrame:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = MessageFrame:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = MessageFrame:CreateTitleRegion() - Creates a title region for dragging the frame
MessageFrame:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
MessageFrame:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
MessageFrame:EnableJoystick(enable) - Enables or disables joystick interactivity
MessageFrame:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
MessageFrame:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
MessageFrame:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
alpha = MessageFrame:GetAlpha() - Returns the opacity of the region relative to its parent
... = MessageFrame:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = MessageFrame:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = MessageFrame:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = MessageFrame:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = MessageFrame:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = MessageFrame:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = MessageFrame:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = MessageFrame:GetCenter() - Returns the screen coordinates of the region's center
... = MessageFrame:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = MessageFrame:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = MessageFrame:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
MessageFrame:GetDontSavePosition() - This function is not yet documented
alpha = MessageFrame:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = MessageFrame:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = MessageFrame:GetEffectiveScale() - Returns the overall scale factor of the frame
duration = MessageFrame:GetFadeDuration() - Returns the duration of the fade-out animation for disappearing messages
fading = MessageFrame:GetFading() - Returns whether messages added to the frame automatically fade out after a period of time
filename, fontHeight, flags = MessageFrame:GetFont() - Returns the font instance's basic font properties
font = MessageFrame:GetFontObject() - Returns the `Font` object from which the font instance's properties are inherited
level = MessageFrame:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = MessageFrame:GetFrameStrata() - Returns the general layering strata of the frame
height = MessageFrame:GetHeight() - Returns the height of the region
left, right, top, bottom = MessageFrame:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = MessageFrame:GetID() - Returns the frame's numeric identifier
indent = MessageFrame:GetIndentedWordWrap() - Returns whether long lines of text are indented when wrapping
position = MessageFrame:GetInsertMode() - Returns the position at which new messages are added to the frame
justify = MessageFrame:GetJustifyH() - Returns the font instance's horizontal text alignment style
justify = MessageFrame:GetJustifyV() - Returns the font instance's vertical text alignment style
left = MessageFrame:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
maxWidth, maxHeight = MessageFrame:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = MessageFrame:GetMinResize() - Returns the minimum size of the frame for user resizing
name = MessageFrame:GetName() - Returns the widget object's name
numChildren = MessageFrame:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = MessageFrame:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = MessageFrame:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = MessageFrame:GetObjectType() - Returns the object's widget type
parent = MessageFrame:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = MessageFrame:GetPoint(index) - Returns information about one of the region's anchor points
MessageFrame:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = MessageFrame:GetRect() - Returns the position and dimensions of the region
... = MessageFrame:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = MessageFrame:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = MessageFrame:GetScale() - Returns the frame's scale factor
handler = MessageFrame:GetScript("scriptType") - Returns the widget's handler function for a script
shadowR, shadowG, shadowB, shadowAlpha = MessageFrame:GetShadowColor() - Returns the color of the font's text shadow
xOffset, yOffset = MessageFrame:GetShadowOffset() - Returns the offset of the font instance's text shadow from its text
width, height = MessageFrame:GetSize() - Returns the width and height of the region
spacing = MessageFrame:GetSpacing() - Returns the font instance's amount of spacing between lines
textR, textG, textB, textAlpha = MessageFrame:GetTextColor() - Returns the font instance's default text color
time = MessageFrame:GetTimeVisible() - Returns the amount of time for which a message remains visible before beginning to fade out
region = MessageFrame:GetTitleRegion() - Returns the frame's TitleRegion object
top = MessageFrame:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = MessageFrame:GetWidth() - Returns the width of the region
hasScript = MessageFrame:HasScript("scriptType") - Returns whether the widget supports a script handler
MessageFrame:Hide() - Hides the region
MessageFrame:HookScript("scriptType", handler) - Securely hooks a script handler
MessageFrame:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = MessageFrame:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = MessageFrame:IsDragging() - Returns whether the region is currently being dragged
registered = MessageFrame:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = MessageFrame:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = MessageFrame:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = MessageFrame:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = MessageFrame:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = MessageFrame:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = MessageFrame:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = MessageFrame:IsMovable() - Returns whether the frame can be moved by the user
isType = MessageFrame:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = MessageFrame:IsProtected() - Returns whether the region is protected
enabled = MessageFrame:IsResizable() - Returns whether the frame can be resized by the user
shown = MessageFrame:IsShown() - Returns whether the region is shown
enabled = MessageFrame:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = MessageFrame:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = MessageFrame:IsVisible() - Returns whether the region is visible
MessageFrame:Lower() - Reduces the frame's frame level below all other frames in its strata
MessageFrame:Raise() - Increases the frame's frame level above all other frames in its strata
MessageFrame:RegisterAllEvents() - Registers the frame for all events
MessageFrame:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
MessageFrame:RegisterForDrag(...) - Registers the frame for dragging
MessageFrame:SetAllPoints([region]) or MessageFrame:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
MessageFrame:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
MessageFrame:SetAttribute("name", value) - Sets a secure frame attribute
MessageFrame:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
MessageFrame:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
MessageFrame:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
MessageFrame:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
MessageFrame:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
MessageFrame:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
MessageFrame:SetDontSavePosition() - This function is not yet documented
MessageFrame:SetFadeDuration(duration) - Sets the duration of the fade-out animation for disappearing messages
MessageFrame:SetFading(fading) - Sets whether messages added to the frame automatically fade out after a period of time
isValid = MessageFrame:SetFont("filename", fontHeight, "flags") - Sets the font instance's basic font properties
MessageFrame:SetFontObject(object) or MessageFrame:SetFontObject("name") - Sets the `Font` object from which the font instance's properties are inherited
MessageFrame:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
MessageFrame:SetFrameStrata("strata") - Sets the general layering strata of the frame
MessageFrame:SetHeight(height) - Sets the region's height
MessageFrame:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
MessageFrame:SetID(id) - Sets a numeric identifier for the frame
MessageFrame:SetIndentedWordWrap(indent) - Sets whether long lines of text are indented when wrapping
MessageFrame:SetInsertMode("position") - Sets the position at which new messages are added to the frame
MessageFrame:SetJustifyH("justify") - Sets the font instance's horizontal text alignment style
MessageFrame:SetJustifyV("justify") - Sets the font instance's vertical text alignment style
MessageFrame:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
MessageFrame:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
MessageFrame:SetMovable(enable) - Sets whether the frame can be moved by the user
MessageFrame:SetParent(frame) or MessageFrame:SetParent("name") - Makes another frame the parent of this region
MessageFrame:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
MessageFrame:SetPropagateKeyboardInput() - This function is not yet documented
MessageFrame:SetResizable(enable) - Sets whether the frame can be resized by the user
MessageFrame:SetScale(scale) - Sets the frame's scale factor
MessageFrame:SetScript("scriptType", handler) - Sets the widget's handler function for a script
MessageFrame:SetShadowColor(shadowR, shadowG, shadowB, shadowAlpha) - Sets the color of the font's text shadow
MessageFrame:SetShadowOffset(xOffset, yOffset) - Sets the offset of the font instance's text shadow from its text
MessageFrame:SetSize(width, height) - Sets the size of the region to the specified values
MessageFrame:SetSpacing(spacing) - Sets the font instance's amount of spacing between lines
MessageFrame:SetTextColor(textR, textG, textB, textAlpha) - Sets the font instance's default text color
MessageFrame:SetTimeVisible(time) - Sets the amount of time for which a message remains visible before beginning to fade out
MessageFrame:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
MessageFrame:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
MessageFrame:SetWidth(width) - Sets the region's width
MessageFrame:Show() - Shows the region
MessageFrame:StartMoving() - Begins repositioning the frame via mouse movement
MessageFrame:StartSizing() - Begins resizing the frame via mouse movement
MessageFrame:StopAnimating() - Stops any active animations involving the region or its children
MessageFrame:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
MessageFrame:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
MessageFrame:UnregisterEvent("event") - Unregisters the frame for an event
Minimap

Minimap:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = Minimap:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = Minimap:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
Minimap:ClearAllPoints() - Removes all anchor points from the region
animationGroup = Minimap:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = Minimap:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = Minimap:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = Minimap:CreateTitleRegion() - Creates a title region for dragging the frame
Minimap:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
Minimap:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
Minimap:EnableJoystick(enable) - Enables or disables joystick interactivity
Minimap:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
Minimap:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
Minimap:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
alpha = Minimap:GetAlpha() - Returns the opacity of the region relative to its parent
... = Minimap:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = Minimap:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = Minimap:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = Minimap:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = Minimap:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = Minimap:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = Minimap:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = Minimap:GetCenter() - Returns the screen coordinates of the region's center
... = Minimap:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = Minimap:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = Minimap:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
Minimap:GetDontSavePosition() - This function is not yet documented
alpha = Minimap:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = Minimap:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = Minimap:GetEffectiveScale() - Returns the overall scale factor of the frame
level = Minimap:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = Minimap:GetFrameStrata() - Returns the general layering strata of the frame
height = Minimap:GetHeight() - Returns the height of the region
left, right, top, bottom = Minimap:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = Minimap:GetID() - Returns the frame's numeric identifier
left = Minimap:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
maxWidth, maxHeight = Minimap:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = Minimap:GetMinResize() - Returns the minimum size of the frame for user resizing
name = Minimap:GetName() - Returns the widget object's name
numChildren = Minimap:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = Minimap:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = Minimap:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = Minimap:GetObjectType() - Returns the object's widget type
parent = Minimap:GetParent() - Returns the object's parent object
x, y = Minimap:GetPingPosition() - Returns the location of the last "ping" on the minimap
point, relativeTo, relativePoint, xOffset, yOffset = Minimap:GetPoint(index) - Returns information about one of the region's anchor points
Minimap:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = Minimap:GetRect() - Returns the position and dimensions of the region
... = Minimap:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = Minimap:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = Minimap:GetScale() - Returns the frame's scale factor
handler = Minimap:GetScript("scriptType") - Returns the widget's handler function for a script
width, height = Minimap:GetSize() - Returns the width and height of the region
region = Minimap:GetTitleRegion() - Returns the frame's TitleRegion object
top = Minimap:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = Minimap:GetWidth() - Returns the width of the region
zoomLevel = Minimap:GetZoom() - Returns the minimap's current zoom level
zoomLevels = Minimap:GetZoomLevels() - Returns the number of available zoom settings for the minimap
hasScript = Minimap:HasScript("scriptType") - Returns whether the widget supports a script handler
Minimap:Hide() - Hides the region
Minimap:HookScript("scriptType", handler) - Securely hooks a script handler
Minimap:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = Minimap:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = Minimap:IsDragging() - Returns whether the region is currently being dragged
registered = Minimap:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = Minimap:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = Minimap:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = Minimap:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = Minimap:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = Minimap:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = Minimap:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = Minimap:IsMovable() - Returns whether the frame can be moved by the user
isType = Minimap:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = Minimap:IsProtected() - Returns whether the region is protected
enabled = Minimap:IsResizable() - Returns whether the frame can be resized by the user
shown = Minimap:IsShown() - Returns whether the region is shown
enabled = Minimap:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = Minimap:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = Minimap:IsVisible() - Returns whether the region is visible
Minimap:Lower() - Reduces the frame's frame level below all other frames in its strata
Minimap:PingLocation(x, y) - "Pings" the minimap at a given location
Minimap:Raise() - Increases the frame's frame level above all other frames in its strata
Minimap:RegisterAllEvents() - Registers the frame for all events
Minimap:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
Minimap:RegisterForDrag(...) - Registers the frame for dragging
Minimap:SetAllPoints([region]) or Minimap:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
Minimap:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
Minimap:SetAttribute("name", value) - Sets a secure frame attribute
Minimap:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
Minimap:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
Minimap:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
Minimap:SetBlipTexture("filename") - Sets the texture used to display quest and tracking icons on the minimap
Minimap:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
Minimap:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
Minimap:SetClassBlipTexture("filename") - Sets the texture used to display party and raid members on the minimap
Minimap:SetCorpsePOIArrowTexture("filename") - Sets the texture used to the player's corpse when located beyond the scope of the minimap
Minimap:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
Minimap:SetDontSavePosition() - This function is not yet documented
Minimap:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
Minimap:SetFrameStrata("strata") - Sets the general layering strata of the frame
Minimap:SetHeight(height) - Sets the region's height
Minimap:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
Minimap:SetID(id) - Sets a numeric identifier for the frame
Minimap:SetIconTexture("filename") - Sets the texture used to display various points of interest on the minimap
Minimap:SetMaskTexture("filename") - Sets the texture used to mask the shape of the minimap
Minimap:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
Minimap:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
Minimap:SetMovable(enable) - Sets whether the frame can be moved by the user
Minimap:SetPOIArrowTexture("filename") - Sets the texture used to represent points of interest located beyond the scope of the minimap
Minimap:SetParent(frame) or Minimap:SetParent("name") - Makes another frame the parent of this region
Minimap:SetPlayerTexture("filename") - Sets the texture used to represent the player on the minimap
Minimap:SetPlayerTextureHeight(height) - Sets the height of the texture used to represent the player on the minimap
Minimap:SetPlayerTextureWidth(width) - Sets the width of the texture used to represent the player on the minimap
Minimap:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
Minimap:SetPropagateKeyboardInput() - This function is not yet documented
Minimap:SetResizable(enable) - Sets whether the frame can be resized by the user
Minimap:SetScale(scale) - Sets the frame's scale factor
Minimap:SetScript("scriptType", handler) - Sets the widget's handler function for a script
Minimap:SetSize(width, height) - Sets the size of the region to the specified values
Minimap:SetStaticPOIArrowTexture("filename") - Sets the texture used to represent static points of interest located beyond the scope of the minimap
Minimap:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
Minimap:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
Minimap:SetWidth(width) - Sets the region's width
Minimap:SetZoom(zoomLevel) - Sets the minimap's zoom level
Minimap:Show() - Shows the region
Minimap:StartMoving() - Begins repositioning the frame via mouse movement
Minimap:StartSizing() - Begins resizing the frame via mouse movement
Minimap:StopAnimating() - Stops any active animations involving the region or its children
Minimap:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
Minimap:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
Minimap:UnregisterEvent("event") - Unregisters the frame for an event
Minimap:UpdateBlips() - This function is not yet documented
Model

Model:AdvanceTime() - Advances to the model's next animation frame
Model:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = Model:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = Model:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
Model:ClearAllPoints() - Removes all anchor points from the region
Model:ClearFog() - Disables fog display for the model.
Model:ClearModel() - Removes the 3D model currently displayed
animationGroup = Model:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = Model:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = Model:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = Model:CreateTitleRegion() - Creates a title region for dragging the frame
Model:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
Model:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
Model:EnableJoystick(enable) - Enables or disables joystick interactivity
Model:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
Model:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
Model:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
alpha = Model:GetAlpha() - Returns the opacity of the region relative to its parent
... = Model:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = Model:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = Model:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = Model:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = Model:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = Model:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = Model:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = Model:GetCenter() - Returns the screen coordinates of the region's center
... = Model:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = Model:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = Model:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
Model:GetDontSavePosition() - This function is not yet documented
alpha = Model:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = Model:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = Model:GetEffectiveScale() - Returns the overall scale factor of the frame
facing = Model:GetFacing() - Returns the model's current rotation setting
red, green, blue = Model:GetFogColor() - Returns the model's current fog color
distance = Model:GetFogFar() - Returns the far clipping distance for the model's fog.
distance = Model:GetFogNear() - Returns the near clipping distance for the model's fog.
level = Model:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = Model:GetFrameStrata() - Returns the general layering strata of the frame
height = Model:GetHeight() - Returns the height of the region
left, right, top, bottom = Model:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = Model:GetID() - Returns the frame's numeric identifier
left = Model:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
enabled, omni, dirX, dirY, dirZ, ambIntensity, ambR, ambG, ambB, dirIntensity, dirR, dirG, dirB = Model:GetLight() - Returns properties of the light sources used when rendering the model
maxWidth, maxHeight = Model:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = Model:GetMinResize() - Returns the minimum size of the frame for user resizing
filename = Model:GetModel() - Returns the model file currently displayed
scale = Model:GetModelScale() - Returns the scale factor determining the size at which the 3D model appears
name = Model:GetName() - Returns the widget object's name
numChildren = Model:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = Model:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = Model:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = Model:GetObjectType() - Returns the object's widget type
parent = Model:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = Model:GetPoint(index) - Returns information about one of the region's anchor points
x, y, z = Model:GetPosition() - Returns the position of the 3D model within the frame
Model:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = Model:GetRect() - Returns the position and dimensions of the region
... = Model:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = Model:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = Model:GetScale() - Returns the frame's scale factor
handler = Model:GetScript("scriptType") - Returns the widget's handler function for a script
width, height = Model:GetSize() - Returns the width and height of the region
region = Model:GetTitleRegion() - Returns the frame's TitleRegion object
top = Model:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = Model:GetWidth() - Returns the width of the region
hasScript = Model:HasScript("scriptType") - Returns whether the widget supports a script handler
Model:Hide() - Hides the region
Model:HookScript("scriptType", handler) - Securely hooks a script handler
Model:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = Model:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = Model:IsDragging() - Returns whether the region is currently being dragged
registered = Model:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = Model:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = Model:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = Model:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = Model:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = Model:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = Model:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = Model:IsMovable() - Returns whether the frame can be moved by the user
isType = Model:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = Model:IsProtected() - Returns whether the region is protected
enabled = Model:IsResizable() - Returns whether the frame can be resized by the user
shown = Model:IsShown() - Returns whether the region is shown
enabled = Model:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = Model:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = Model:IsVisible() - Returns whether the region is visible
Model:Lower() - Reduces the frame's frame level below all other frames in its strata
Model:Raise() - Increases the frame's frame level above all other frames in its strata
Model:RegisterAllEvents() - Registers the frame for all events
Model:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
Model:RegisterForDrag(...) - Registers the frame for dragging
Model:ReplaceIconTexture("filename") - Sets the icon texture used by the model
Model:SetAllPoints([region]) or Model:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
Model:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
Model:SetAttribute("name", value) - Sets a secure frame attribute
Model:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
Model:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
Model:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
Model:SetCamera(index) - Sets the view angle on the model to a pre-defined camera location
Model:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
Model:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
Model:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
Model:SetDontSavePosition() - This function is not yet documented
Model:SetFacing(facing) - Sets the model's current rotation
Model:SetFogColor(red, green, blue) - Sets the model's fog color, enabling fog display if disabled
Model:SetFogFar(distance) - Sets the far clipping distance for the model's fog.
Model:SetFogNear(distance) - Sets the near clipping distance for the model's fog.
Model:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
Model:SetFrameStrata("strata") - Sets the general layering strata of the frame
Model:SetGlow(amount) - Sets the model's glow amount
Model:SetHeight(height) - Sets the region's height
Model:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
Model:SetID(id) - Sets a numeric identifier for the frame
Model:SetLight(enabled, omni, dirX, dirY, dirZ, ambIntensity [, ambR [, ambG [, ambB [, dirIntensity [, dirR [, dirG [, dirB]]]]]]]) - Sets properties of the light sources used when rendering the model
Model:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
Model:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
Model:SetModel("filename") - Sets the model file to be displayed
Model:SetModelScale(scale) - Sets the scale factor determining the size at which the 3D model appears
Model:SetMovable(enable) - Sets whether the frame can be moved by the user
Model:SetParent(frame) or Model:SetParent("name") - Makes another frame the parent of this region
Model:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
Model:SetPosition(x, y, z) - Returns the position of the 3D model within the frame
Model:SetPropagateKeyboardInput() - This function is not yet documented
Model:SetResizable(enable) - Sets whether the frame can be resized by the user
Model:SetScale(scale) - Sets the frame's scale factor
Model:SetScript("scriptType", handler) - Sets the widget's handler function for a script
Model:SetSequence(sequence) - Sets the animation sequence to be used by the model
Model:SetSequenceTime(sequence, time) - Sets the animation sequence and time index to be used by the model
Model:SetSize(width, height) - Sets the size of the region to the specified values
Model:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
Model:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
Model:SetWidth(width) - Sets the region's width
Model:Show() - Shows the region
Model:StartMoving() - Begins repositioning the frame via mouse movement
Model:StartSizing() - Begins resizing the frame via mouse movement
Model:StopAnimating() - Stops any active animations involving the region or its children
Model:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
Model:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
Model:UnregisterEvent("event") - Unregisters the frame for an event
MovieFrame

MovieFrame:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = MovieFrame:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = MovieFrame:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
MovieFrame:ClearAllPoints() - Removes all anchor points from the region
animationGroup = MovieFrame:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = MovieFrame:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = MovieFrame:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = MovieFrame:CreateTitleRegion() - Creates a title region for dragging the frame
MovieFrame:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
MovieFrame:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
MovieFrame:EnableJoystick(enable) - Enables or disables joystick interactivity
MovieFrame:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
MovieFrame:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
MovieFrame:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
MovieFrame:EnableSubtitles(enable) - Enables or disables subtitles for movies played in the frame
alpha = MovieFrame:GetAlpha() - Returns the opacity of the region relative to its parent
... = MovieFrame:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = MovieFrame:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = MovieFrame:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = MovieFrame:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = MovieFrame:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = MovieFrame:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = MovieFrame:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = MovieFrame:GetCenter() - Returns the screen coordinates of the region's center
... = MovieFrame:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = MovieFrame:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = MovieFrame:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
MovieFrame:GetDontSavePosition() - This function is not yet documented
alpha = MovieFrame:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = MovieFrame:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = MovieFrame:GetEffectiveScale() - Returns the overall scale factor of the frame
level = MovieFrame:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = MovieFrame:GetFrameStrata() - Returns the general layering strata of the frame
height = MovieFrame:GetHeight() - Returns the height of the region
left, right, top, bottom = MovieFrame:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = MovieFrame:GetID() - Returns the frame's numeric identifier
left = MovieFrame:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
maxWidth, maxHeight = MovieFrame:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = MovieFrame:GetMinResize() - Returns the minimum size of the frame for user resizing
name = MovieFrame:GetName() - Returns the widget object's name
numChildren = MovieFrame:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = MovieFrame:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = MovieFrame:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = MovieFrame:GetObjectType() - Returns the object's widget type
parent = MovieFrame:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = MovieFrame:GetPoint(index) - Returns information about one of the region's anchor points
MovieFrame:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = MovieFrame:GetRect() - Returns the position and dimensions of the region
... = MovieFrame:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = MovieFrame:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = MovieFrame:GetScale() - Returns the frame's scale factor
handler = MovieFrame:GetScript("scriptType") - Returns the widget's handler function for a script
width, height = MovieFrame:GetSize() - Returns the width and height of the region
region = MovieFrame:GetTitleRegion() - Returns the frame's TitleRegion object
top = MovieFrame:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = MovieFrame:GetWidth() - Returns the width of the region
hasScript = MovieFrame:HasScript("scriptType") - Returns whether the widget supports a script handler
MovieFrame:Hide() - Hides the region
MovieFrame:HookScript("scriptType", handler) - Securely hooks a script handler
MovieFrame:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = MovieFrame:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = MovieFrame:IsDragging() - Returns whether the region is currently being dragged
registered = MovieFrame:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = MovieFrame:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = MovieFrame:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = MovieFrame:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = MovieFrame:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = MovieFrame:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = MovieFrame:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = MovieFrame:IsMovable() - Returns whether the frame can be moved by the user
isType = MovieFrame:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = MovieFrame:IsProtected() - Returns whether the region is protected
enabled = MovieFrame:IsResizable() - Returns whether the frame can be resized by the user
shown = MovieFrame:IsShown() - Returns whether the region is shown
enabled = MovieFrame:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = MovieFrame:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = MovieFrame:IsVisible() - Returns whether the region is visible
MovieFrame:Lower() - Reduces the frame's frame level below all other frames in its strata
MovieFrame:Raise() - Increases the frame's frame level above all other frames in its strata
MovieFrame:RegisterAllEvents() - Registers the frame for all events
MovieFrame:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
MovieFrame:RegisterForDrag(...) - Registers the frame for dragging
MovieFrame:SetAllPoints([region]) or MovieFrame:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
MovieFrame:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
MovieFrame:SetAttribute("name", value) - Sets a secure frame attribute
MovieFrame:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
MovieFrame:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
MovieFrame:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
MovieFrame:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
MovieFrame:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
MovieFrame:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
MovieFrame:SetDontSavePosition() - This function is not yet documented
MovieFrame:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
MovieFrame:SetFrameStrata("strata") - Sets the general layering strata of the frame
MovieFrame:SetHeight(height) - Sets the region's height
MovieFrame:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
MovieFrame:SetID(id) - Sets a numeric identifier for the frame
MovieFrame:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
MovieFrame:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
MovieFrame:SetMovable(enable) - Sets whether the frame can be moved by the user
MovieFrame:SetParent(frame) or MovieFrame:SetParent("name") - Makes another frame the parent of this region
MovieFrame:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
MovieFrame:SetPropagateKeyboardInput() - This function is not yet documented
MovieFrame:SetResizable(enable) - Sets whether the frame can be resized by the user
MovieFrame:SetScale(scale) - Sets the frame's scale factor
MovieFrame:SetScript("scriptType", handler) - Sets the widget's handler function for a script
MovieFrame:SetSize(width, height) - Sets the size of the region to the specified values
MovieFrame:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
MovieFrame:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
MovieFrame:SetWidth(width) - Sets the region's width
MovieFrame:Show() - Shows the region
enabled = MovieFrame:StartMovie("filename", volume) - Plays a specified movie in the frame
MovieFrame:StartMoving() - Begins repositioning the frame via mouse movement
MovieFrame:StartSizing() - Begins resizing the frame via mouse movement
MovieFrame:StopAnimating() - Stops any active animations involving the region or its children
MovieFrame:StopMovie() - Stops the movie currently playing in the frame
MovieFrame:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
MovieFrame:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
MovieFrame:UnregisterEvent("event") - Unregisters the frame for an event
ParentedObject

name = ParentedObject:GetName() - Returns the widget object's name
type = ParentedObject:GetObjectType() - Returns the object's widget type
parent = ParentedObject:GetParent() - Returns the object's parent object
isType = ParentedObject:IsObjectType("type") - Returns whether the object belongs to a given widget type
Path

Path:CreateControlPoint(["name" [, "template" [, order]]]) - Creates a new control point for the given path
... = Path:GetControlPoints() - Returns the control points that belong to a given path
curveType = Path:GetCurve() - Returns the curveType of the given path
duration = Path:GetDuration() - Returns the time for the animation to progress from start to finish
elapsed = Path:GetElapsed() - Returns the amount of time since the animation began playing
delay = Path:GetEndDelay() - Returns the amount of time the animation delays after finishing
max = Path:GetMaxOrder() - Returns the maximum order of the control points belonging to a given path
name = Path:GetName() - Returns the widget object's name
type = Path:GetObjectType() - Returns the object's widget type
order = Path:GetOrder() - Returns the order of the animation within its parent group
parent = Path:GetParent() - Returns the object's parent object
progress = Path:GetProgress() - Returns the progress of an animation, ignoring smoothing effects
progress = Path:GetProgressWithDelay() - Returns the progress of the animation and associated delays
region = Path:GetRegionParent() - Returns the `Region` object on which the animation operates
handler = Path:GetScript("scriptType") - Returns the widget's handler function for a script
progress = Path:GetSmoothProgress() - Returns the progress of the animation (ignoring start and end delay)
smoothType = Path:GetSmoothing() - Returns the smoothing type for the animation
delay = Path:GetStartDelay() - Returns the amount of time the animation delays before its progress begins
hasScript = Path:HasScript("scriptType") - Returns whether the widget supports a script handler
Path:HookScript("scriptType", handler) - Securely hooks a script handler
delaying = Path:IsDelaying() - Returns whether the animation is currently in the middle of a start or end delay
done = Path:IsDone() - Returns whether the animation has finished playing
isType = Path:IsObjectType("type") - Returns whether the object belongs to a given widget type
paused = Path:IsPaused() - Returns whether the animation is currently paused
playing = Path:IsPlaying() - Returns whether the animation is currently playing
stopped = Path:IsStopped() - Returns whether the animation is currently stopped
Path:Pause() - Pauses the animation
Path:Play() - Plays the animation
Path:SetCurve("curveType") - Sets the curve type for the path animation
Path:SetDuration(duration) - Sets the time for the animation to progress from start to finish
Path:SetEndDelay(delay) - Sets the amount of time for the animation to delay after finishing
Path:SetOrder(order) - Sets the order for the animation to play within its parent group
Path:SetParent(animGroup) or Path:SetParent("animGroupName") - Sets the parent for the animation
Path:SetScript("scriptType", handler) - Sets the widget's handler function for a script
Path:SetSmoothProgress() - This function is not yet documented
Path:SetSmoothing("smoothType") - Sets the smoothing type for the animation
Path:SetStartDelay(delay) - Sets the amount of time for the animation to delay before its progress begins
Path:Stop() - Stops the animation
PlayerModel

PlayerModel:AdvanceTime() - Advances to the model's next animation frame
PlayerModel:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = PlayerModel:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = PlayerModel:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
PlayerModel:ClearAllPoints() - Removes all anchor points from the region
PlayerModel:ClearFog() - Disables fog display for the model.
PlayerModel:ClearModel() - Removes the 3D model currently displayed
animationGroup = PlayerModel:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = PlayerModel:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = PlayerModel:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = PlayerModel:CreateTitleRegion() - Creates a title region for dragging the frame
PlayerModel:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
PlayerModel:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
PlayerModel:EnableJoystick(enable) - Enables or disables joystick interactivity
PlayerModel:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
PlayerModel:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
PlayerModel:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
alpha = PlayerModel:GetAlpha() - Returns the opacity of the region relative to its parent
... = PlayerModel:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = PlayerModel:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = PlayerModel:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = PlayerModel:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = PlayerModel:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = PlayerModel:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = PlayerModel:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = PlayerModel:GetCenter() - Returns the screen coordinates of the region's center
... = PlayerModel:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = PlayerModel:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = PlayerModel:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
PlayerModel:GetDontSavePosition() - This function is not yet documented
alpha = PlayerModel:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = PlayerModel:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = PlayerModel:GetEffectiveScale() - Returns the overall scale factor of the frame
facing = PlayerModel:GetFacing() - Returns the model's current rotation setting
red, green, blue = PlayerModel:GetFogColor() - Returns the model's current fog color
distance = PlayerModel:GetFogFar() - Returns the far clipping distance for the model's fog.
distance = PlayerModel:GetFogNear() - Returns the near clipping distance for the model's fog.
level = PlayerModel:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = PlayerModel:GetFrameStrata() - Returns the general layering strata of the frame
height = PlayerModel:GetHeight() - Returns the height of the region
left, right, top, bottom = PlayerModel:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = PlayerModel:GetID() - Returns the frame's numeric identifier
left = PlayerModel:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
enabled, omni, dirX, dirY, dirZ, ambIntensity, ambR, ambG, ambB, dirIntensity, dirR, dirG, dirB = PlayerModel:GetLight() - Returns properties of the light sources used when rendering the model
maxWidth, maxHeight = PlayerModel:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = PlayerModel:GetMinResize() - Returns the minimum size of the frame for user resizing
filename = PlayerModel:GetModel() - Returns the model file currently displayed
scale = PlayerModel:GetModelScale() - Returns the scale factor determining the size at which the 3D model appears
name = PlayerModel:GetName() - Returns the widget object's name
numChildren = PlayerModel:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = PlayerModel:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = PlayerModel:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = PlayerModel:GetObjectType() - Returns the object's widget type
parent = PlayerModel:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = PlayerModel:GetPoint(index) - Returns information about one of the region's anchor points
x, y, z = PlayerModel:GetPosition() - Returns the position of the 3D model within the frame
PlayerModel:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = PlayerModel:GetRect() - Returns the position and dimensions of the region
... = PlayerModel:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = PlayerModel:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = PlayerModel:GetScale() - Returns the frame's scale factor
handler = PlayerModel:GetScript("scriptType") - Returns the widget's handler function for a script
width, height = PlayerModel:GetSize() - Returns the width and height of the region
region = PlayerModel:GetTitleRegion() - Returns the frame's TitleRegion object
top = PlayerModel:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = PlayerModel:GetWidth() - Returns the width of the region
hasScript = PlayerModel:HasScript("scriptType") - Returns whether the widget supports a script handler
PlayerModel:Hide() - Hides the region
PlayerModel:HookScript("scriptType", handler) - Securely hooks a script handler
PlayerModel:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = PlayerModel:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = PlayerModel:IsDragging() - Returns whether the region is currently being dragged
registered = PlayerModel:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = PlayerModel:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = PlayerModel:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = PlayerModel:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = PlayerModel:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = PlayerModel:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = PlayerModel:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = PlayerModel:IsMovable() - Returns whether the frame can be moved by the user
isType = PlayerModel:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = PlayerModel:IsProtected() - Returns whether the region is protected
enabled = PlayerModel:IsResizable() - Returns whether the frame can be resized by the user
shown = PlayerModel:IsShown() - Returns whether the region is shown
enabled = PlayerModel:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = PlayerModel:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = PlayerModel:IsVisible() - Returns whether the region is visible
PlayerModel:Lower() - Reduces the frame's frame level below all other frames in its strata
PlayerModel:Raise() - Increases the frame's frame level above all other frames in its strata
PlayerModel:RefreshCamera() - This function is not yet documented
PlayerModel:RefreshUnit() - Updates the model's appearance to match that of its unit
PlayerModel:RegisterAllEvents() - Registers the frame for all events
PlayerModel:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
PlayerModel:RegisterForDrag(...) - Registers the frame for dragging
PlayerModel:ReplaceIconTexture("filename") - Sets the icon texture used by the model
PlayerModel:SetAllPoints([region]) or PlayerModel:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
PlayerModel:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
PlayerModel:SetAttribute("name", value) - Sets a secure frame attribute
PlayerModel:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
PlayerModel:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
PlayerModel:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
PlayerModel:SetBarberShopAlternateForm() - This function is not yet documented
PlayerModel:SetCamDistanceScale() - This function is not yet documented
PlayerModel:SetCamera(index) - Sets the view angle on the model to a pre-defined camera location
PlayerModel:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
PlayerModel:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
PlayerModel:SetCreature(creature) - Sets the model to display the 3D model of a specific creature
PlayerModel:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
PlayerModel:SetDisplayInfo() - This function is not yet documented
PlayerModel:SetDontSavePosition() - This function is not yet documented
PlayerModel:SetFacing(facing) - Sets the model's current rotation
PlayerModel:SetFogColor(red, green, blue) - Sets the model's fog color, enabling fog display if disabled
PlayerModel:SetFogFar(distance) - Sets the far clipping distance for the model's fog.
PlayerModel:SetFogNear(distance) - Sets the near clipping distance for the model's fog.
PlayerModel:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
PlayerModel:SetFrameStrata("strata") - Sets the general layering strata of the frame
PlayerModel:SetGlow(amount) - Sets the model's glow amount
PlayerModel:SetHeight(height) - Sets the region's height
PlayerModel:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
PlayerModel:SetID(id) - Sets a numeric identifier for the frame
PlayerModel:SetLight(enabled, omni, dirX, dirY, dirZ, ambIntensity [, ambR [, ambG [, ambB [, dirIntensity [, dirR [, dirG [, dirB]]]]]]]) - Sets properties of the light sources used when rendering the model
PlayerModel:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
PlayerModel:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
PlayerModel:SetModel("filename") - Sets the model file to be displayed
PlayerModel:SetModelScale(scale) - Sets the scale factor determining the size at which the 3D model appears
PlayerModel:SetMovable(enable) - Sets whether the frame can be moved by the user
PlayerModel:SetParent(frame) or PlayerModel:SetParent("name") - Makes another frame the parent of this region
PlayerModel:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
PlayerModel:SetPortraitZoom() - This function is not yet documented
PlayerModel:SetPosition(x, y, z) - Returns the position of the 3D model within the frame
PlayerModel:SetPropagateKeyboardInput() - This function is not yet documented
PlayerModel:SetResizable(enable) - Sets whether the frame can be resized by the user
PlayerModel:SetRotation(facing) - Sets the model's current rotation by animating the model
PlayerModel:SetScale(scale) - Sets the frame's scale factor
PlayerModel:SetScript("scriptType", handler) - Sets the widget's handler function for a script
PlayerModel:SetSequence(sequence) - Sets the animation sequence to be used by the model
PlayerModel:SetSequenceTime(sequence, time) - Sets the animation sequence and time index to be used by the model
PlayerModel:SetSize(width, height) - Sets the size of the region to the specified values
PlayerModel:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
PlayerModel:SetUnit("unit") - Sets the model to display the 3D model of a specific unit
PlayerModel:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
PlayerModel:SetWidth(width) - Sets the region's width
PlayerModel:Show() - Shows the region
PlayerModel:StartMoving() - Begins repositioning the frame via mouse movement
PlayerModel:StartSizing() - Begins resizing the frame via mouse movement
PlayerModel:StopAnimating() - Stops any active animations involving the region or its children
PlayerModel:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
PlayerModel:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
PlayerModel:UnregisterEvent("event") - Unregisters the frame for an event
QuestPOIFrame

QuestPOIFrame:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = QuestPOIFrame:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = QuestPOIFrame:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
QuestPOIFrame:ClearAllPoints() - Removes all anchor points from the region
animationGroup = QuestPOIFrame:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = QuestPOIFrame:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = QuestPOIFrame:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = QuestPOIFrame:CreateTitleRegion() - Creates a title region for dragging the frame
QuestPOIFrame:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
QuestPOIFrame:DrawBlob(QuestId, Draw) - Draws the Blob for the Quest.
QuestPOIFrame:DrawNone() - This function is not yet documented
QuestPOIFrame:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
QuestPOIFrame:EnableJoystick(enable) - Enables or disables joystick interactivity
QuestPOIFrame:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
QuestPOIFrame:EnableMerging() - This function is not yet documented
QuestPOIFrame:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
QuestPOIFrame:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
QuestPOIFrame:EnableSmoothing() - This function is not yet documented
alpha = QuestPOIFrame:GetAlpha() - Returns the opacity of the region relative to its parent
... = QuestPOIFrame:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = QuestPOIFrame:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = QuestPOIFrame:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = QuestPOIFrame:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = QuestPOIFrame:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = QuestPOIFrame:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = QuestPOIFrame:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = QuestPOIFrame:GetCenter() - Returns the screen coordinates of the region's center
... = QuestPOIFrame:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = QuestPOIFrame:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = QuestPOIFrame:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
QuestPOIFrame:GetDontSavePosition() - This function is not yet documented
alpha = QuestPOIFrame:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = QuestPOIFrame:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = QuestPOIFrame:GetEffectiveScale() - Returns the overall scale factor of the frame
level = QuestPOIFrame:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = QuestPOIFrame:GetFrameStrata() - Returns the general layering strata of the frame
height = QuestPOIFrame:GetHeight() - Returns the height of the region
left, right, top, bottom = QuestPOIFrame:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = QuestPOIFrame:GetID() - Returns the frame's numeric identifier
left = QuestPOIFrame:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
maxWidth, maxHeight = QuestPOIFrame:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = QuestPOIFrame:GetMinResize() - Returns the minimum size of the frame for user resizing
name = QuestPOIFrame:GetName() - Returns the widget object's name
numChildren = QuestPOIFrame:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = QuestPOIFrame:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = QuestPOIFrame:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
QuestPOIFrame:GetNumTooltips() - This function is not yet documented
type = QuestPOIFrame:GetObjectType() - Returns the object's widget type
parent = QuestPOIFrame:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = QuestPOIFrame:GetPoint(index) - Returns information about one of the region's anchor points
QuestPOIFrame:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = QuestPOIFrame:GetRect() - Returns the position and dimensions of the region
... = QuestPOIFrame:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = QuestPOIFrame:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = QuestPOIFrame:GetScale() - Returns the frame's scale factor
handler = QuestPOIFrame:GetScript("scriptType") - Returns the widget's handler function for a script
width, height = QuestPOIFrame:GetSize() - Returns the width and height of the region
region = QuestPOIFrame:GetTitleRegion() - Returns the frame's TitleRegion object
QuestPOIFrame:GetTooltipIndex() - This function is not yet documented
top = QuestPOIFrame:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = QuestPOIFrame:GetWidth() - Returns the width of the region
hasScript = QuestPOIFrame:HasScript("scriptType") - Returns whether the widget supports a script handler
QuestPOIFrame:Hide() - Hides the region
QuestPOIFrame:HookScript("scriptType", handler) - Securely hooks a script handler
QuestPOIFrame:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = QuestPOIFrame:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = QuestPOIFrame:IsDragging() - Returns whether the region is currently being dragged
registered = QuestPOIFrame:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = QuestPOIFrame:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = QuestPOIFrame:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = QuestPOIFrame:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = QuestPOIFrame:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = QuestPOIFrame:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = QuestPOIFrame:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = QuestPOIFrame:IsMovable() - Returns whether the frame can be moved by the user
isType = QuestPOIFrame:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = QuestPOIFrame:IsProtected() - Returns whether the region is protected
enabled = QuestPOIFrame:IsResizable() - Returns whether the frame can be resized by the user
shown = QuestPOIFrame:IsShown() - Returns whether the region is shown
enabled = QuestPOIFrame:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = QuestPOIFrame:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = QuestPOIFrame:IsVisible() - Returns whether the region is visible
QuestPOIFrame:Lower() - Reduces the frame's frame level below all other frames in its strata
QuestPOIFrame:Raise() - Increases the frame's frame level above all other frames in its strata
QuestPOIFrame:RegisterAllEvents() - Registers the frame for all events
QuestPOIFrame:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
QuestPOIFrame:RegisterForDrag(...) - Registers the frame for dragging
QuestPOIFrame:SetAllPoints([region]) or QuestPOIFrame:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
QuestPOIFrame:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
QuestPOIFrame:SetAttribute("name", value) - Sets a secure frame attribute
QuestPOIFrame:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
QuestPOIFrame:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
QuestPOIFrame:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
QuestPOIFrame:SetBorderAlpha(Alpha) - Set the alpha for the border texture
QuestPOIFrame:SetBorderScalar(Scalar) - Set the Border Scalar
QuestPOIFrame:SetBorderTexture("Texture") - Sets the border Texture for the Blob
QuestPOIFrame:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
QuestPOIFrame:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
QuestPOIFrame:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
QuestPOIFrame:SetDontSavePosition() - This function is not yet documented
QuestPOIFrame:SetFillAlpha(Alpha) - Set the Alpha for the fill Texture
QuestPOIFrame:SetFillTexture("Texture") - Set the fill Texture for the Blob.
QuestPOIFrame:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
QuestPOIFrame:SetFrameStrata("strata") - Sets the general layering strata of the frame
QuestPOIFrame:SetHeight(height) - Sets the region's height
QuestPOIFrame:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
QuestPOIFrame:SetID(id) - Sets a numeric identifier for the frame
QuestPOIFrame:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
QuestPOIFrame:SetMergeThreshold() - This function is not yet documented
QuestPOIFrame:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
QuestPOIFrame:SetMovable(enable) - Sets whether the frame can be moved by the user
QuestPOIFrame:SetNumSplinePoints() - This function is not yet documented
QuestPOIFrame:SetParent(frame) or QuestPOIFrame:SetParent("name") - Makes another frame the parent of this region
QuestPOIFrame:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
QuestPOIFrame:SetPropagateKeyboardInput() - This function is not yet documented
QuestPOIFrame:SetResizable(enable) - Sets whether the frame can be resized by the user
QuestPOIFrame:SetScale(scale) - Sets the frame's scale factor
QuestPOIFrame:SetScript("scriptType", handler) - Sets the widget's handler function for a script
QuestPOIFrame:SetSize(width, height) - Sets the size of the region to the specified values
QuestPOIFrame:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
QuestPOIFrame:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
QuestPOIFrame:SetWidth(width) - Sets the region's width
QuestPOIFrame:Show() - Shows the region
QuestPOIFrame:StartMoving() - Begins repositioning the frame via mouse movement
QuestPOIFrame:StartSizing() - Begins resizing the frame via mouse movement
QuestPOIFrame:StopAnimating() - Stops any active animations involving the region or its children
QuestPOIFrame:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
QuestPOIFrame:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
QuestPOIFrame:UnregisterEvent("event") - Unregisters the frame for an event
QuestPOIFrame:UpdateMouseOverTooltip() - This function is not yet documented
Region

canChange = Region:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
Region:ClearAllPoints() - Removes all anchor points from the region
animationGroup = Region:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
... = Region:GetAnimationGroups() - Returns a list of animation groups belonging to the region
bottom = Region:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
x, y = Region:GetCenter() - Returns the screen coordinates of the region's center
height = Region:GetHeight() - Returns the height of the region
left = Region:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
name = Region:GetName() - Returns the widget object's name
numPoints = Region:GetNumPoints() - Returns the number of anchor points defined for the region
type = Region:GetObjectType() - Returns the object's widget type
parent = Region:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = Region:GetPoint(index) - Returns information about one of the region's anchor points
left, bottom, width, height = Region:GetRect() - Returns the position and dimensions of the region
right = Region:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
width, height = Region:GetSize() - Returns the width and height of the region
top = Region:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = Region:GetWidth() - Returns the width of the region
isDragging = Region:IsDragging() - Returns whether the region is currently being dragged
isOver = Region:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
isType = Region:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = Region:IsProtected() - Returns whether the region is protected
Region:SetAllPoints([region]) or Region:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
Region:SetHeight(height) - Sets the region's height
Region:SetParent(frame) or Region:SetParent("name") - Makes another frame the parent of this region
Region:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
Region:SetSize(width, height) - Sets the size of the region to the specified values
Region:SetWidth(width) - Sets the region's width
Region:StopAnimating() - Stops any active animations involving the region or its children
Rotation

degrees = Rotation:GetDegrees() - Returns the animation's rotation amount (in degrees)
duration = Rotation:GetDuration() - Returns the time for the animation to progress from start to finish
elapsed = Rotation:GetElapsed() - Returns the amount of time since the animation began playing
delay = Rotation:GetEndDelay() - Returns the amount of time the animation delays after finishing
name = Rotation:GetName() - Returns the widget object's name
type = Rotation:GetObjectType() - Returns the object's widget type
order = Rotation:GetOrder() - Returns the order of the animation within its parent group
point, xOffset, yOffset = Rotation:GetOrigin() - Returns the rotation animation's origin point
parent = Rotation:GetParent() - Returns the object's parent object
progress = Rotation:GetProgress() - Returns the progress of an animation, ignoring smoothing effects
progress = Rotation:GetProgressWithDelay() - Returns the progress of the animation and associated delays
radians = Rotation:GetRadians() - Returns the animation's rotation amount (in radians)
region = Rotation:GetRegionParent() - Returns the `Region` object on which the animation operates
handler = Rotation:GetScript("scriptType") - Returns the widget's handler function for a script
progress = Rotation:GetSmoothProgress() - Returns the progress of the animation (ignoring start and end delay)
smoothType = Rotation:GetSmoothing() - Returns the smoothing type for the animation
delay = Rotation:GetStartDelay() - Returns the amount of time the animation delays before its progress begins
hasScript = Rotation:HasScript("scriptType") - Returns whether the widget supports a script handler
Rotation:HookScript("scriptType", handler) - Securely hooks a script handler
delaying = Rotation:IsDelaying() - Returns whether the animation is currently in the middle of a start or end delay
done = Rotation:IsDone() - Returns whether the animation has finished playing
isType = Rotation:IsObjectType("type") - Returns whether the object belongs to a given widget type
paused = Rotation:IsPaused() - Returns whether the animation is currently paused
playing = Rotation:IsPlaying() - Returns whether the animation is currently playing
stopped = Rotation:IsStopped() - Returns whether the animation is currently stopped
Rotation:Pause() - Pauses the animation
Rotation:Play() - Plays the animation
Rotation:SetDegrees(degrees) - Sets the animation's rotation amount (in degrees)
Rotation:SetDuration(duration) - Sets the time for the animation to progress from start to finish
Rotation:SetEndDelay(delay) - Sets the amount of time for the animation to delay after finishing
Rotation:SetOrder(order) - Sets the order for the animation to play within its parent group
Rotation:SetOrigin("point", xOffset, yOffset) - Sets the rotation animation's origin point
Rotation:SetParent(animGroup) or Rotation:SetParent("animGroupName") - Sets the parent for the animation
Rotation:SetRadians(radians) - Sets the animation's rotation amount (in radians)
Rotation:SetScript("scriptType", handler) - Sets the widget's handler function for a script
Rotation:SetSmoothProgress() - This function is not yet documented
Rotation:SetSmoothing("smoothType") - Sets the smoothing type for the animation
Rotation:SetStartDelay(delay) - Sets the amount of time for the animation to delay before its progress begins
Rotation:Stop() - Stops the animation
Scale

duration = Scale:GetDuration() - Returns the time for the animation to progress from start to finish
elapsed = Scale:GetElapsed() - Returns the amount of time since the animation began playing
delay = Scale:GetEndDelay() - Returns the amount of time the animation delays after finishing
name = Scale:GetName() - Returns the widget object's name
type = Scale:GetObjectType() - Returns the object's widget type
order = Scale:GetOrder() - Returns the order of the animation within its parent group
point, xOffset, yOffset = Scale:GetOrigin() - Returns the scale animation's origin point
parent = Scale:GetParent() - Returns the object's parent object
progress = Scale:GetProgress() - Returns the progress of an animation, ignoring smoothing effects
progress = Scale:GetProgressWithDelay() - Returns the progress of the animation and associated delays
region = Scale:GetRegionParent() - Returns the `Region` object on which the animation operates
xFactor, yFactor = Scale:GetScale() - Returns the animation's scaling factors
handler = Scale:GetScript("scriptType") - Returns the widget's handler function for a script
progress = Scale:GetSmoothProgress() - Returns the progress of the animation (ignoring start and end delay)
smoothType = Scale:GetSmoothing() - Returns the smoothing type for the animation
delay = Scale:GetStartDelay() - Returns the amount of time the animation delays before its progress begins
hasScript = Scale:HasScript("scriptType") - Returns whether the widget supports a script handler
Scale:HookScript("scriptType", handler) - Securely hooks a script handler
delaying = Scale:IsDelaying() - Returns whether the animation is currently in the middle of a start or end delay
done = Scale:IsDone() - Returns whether the animation has finished playing
isType = Scale:IsObjectType("type") - Returns whether the object belongs to a given widget type
paused = Scale:IsPaused() - Returns whether the animation is currently paused
playing = Scale:IsPlaying() - Returns whether the animation is currently playing
stopped = Scale:IsStopped() - Returns whether the animation is currently stopped
Scale:Pause() - Pauses the animation
Scale:Play() - Plays the animation
Scale:SetDuration(duration) - Sets the time for the animation to progress from start to finish
Scale:SetEndDelay(delay) - Sets the amount of time for the animation to delay after finishing
Scale:SetOrder(order) - Sets the order for the animation to play within its parent group
Scale:SetOrigin("point", xOffset, yOffset) - Sets the scale animation's origin point
Scale:SetParent(animGroup) or Scale:SetParent("animGroupName") - Sets the parent for the animation
Scale:SetScale(xFactor, yFactor) - Sets the animation's scaling factors
Scale:SetScript("scriptType", handler) - Sets the widget's handler function for a script
Scale:SetSmoothProgress() - This function is not yet documented
Scale:SetSmoothing("smoothType") - Sets the smoothing type for the animation
Scale:SetStartDelay(delay) - Sets the amount of time for the animation to delay before its progress begins
Scale:Stop() - Stops the animation
ScriptObject

handler = ScriptObject:GetScript("scriptType") - Returns the widget's handler function for a script
hasScript = ScriptObject:HasScript("scriptType") - Returns whether the widget supports a script handler
ScriptObject:HookScript("scriptType", handler) - Securely hooks a script handler
ScriptObject:SetScript("scriptType", handler) - Sets the widget's handler function for a script
ScrollFrame

ScrollFrame:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = ScrollFrame:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = ScrollFrame:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
ScrollFrame:ClearAllPoints() - Removes all anchor points from the region
animationGroup = ScrollFrame:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = ScrollFrame:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = ScrollFrame:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = ScrollFrame:CreateTitleRegion() - Creates a title region for dragging the frame
ScrollFrame:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
ScrollFrame:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
ScrollFrame:EnableJoystick(enable) - Enables or disables joystick interactivity
ScrollFrame:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
ScrollFrame:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
ScrollFrame:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
alpha = ScrollFrame:GetAlpha() - Returns the opacity of the region relative to its parent
... = ScrollFrame:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = ScrollFrame:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = ScrollFrame:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = ScrollFrame:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = ScrollFrame:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = ScrollFrame:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = ScrollFrame:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = ScrollFrame:GetCenter() - Returns the screen coordinates of the region's center
... = ScrollFrame:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = ScrollFrame:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = ScrollFrame:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
ScrollFrame:GetDontSavePosition() - This function is not yet documented
alpha = ScrollFrame:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = ScrollFrame:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = ScrollFrame:GetEffectiveScale() - Returns the overall scale factor of the frame
level = ScrollFrame:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = ScrollFrame:GetFrameStrata() - Returns the general layering strata of the frame
height = ScrollFrame:GetHeight() - Returns the height of the region
left, right, top, bottom = ScrollFrame:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
scroll = ScrollFrame:GetHorizontalScroll() - Returns the scroll frame's current horizontal scroll position
maxScroll = ScrollFrame:GetHorizontalScrollRange() - Returns the scroll frame's maximum horizontal (rightmost) scroll position
id = ScrollFrame:GetID() - Returns the frame's numeric identifier
left = ScrollFrame:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
maxWidth, maxHeight = ScrollFrame:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = ScrollFrame:GetMinResize() - Returns the minimum size of the frame for user resizing
name = ScrollFrame:GetName() - Returns the widget object's name
numChildren = ScrollFrame:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = ScrollFrame:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = ScrollFrame:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = ScrollFrame:GetObjectType() - Returns the object's widget type
parent = ScrollFrame:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = ScrollFrame:GetPoint(index) - Returns information about one of the region's anchor points
ScrollFrame:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = ScrollFrame:GetRect() - Returns the position and dimensions of the region
... = ScrollFrame:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = ScrollFrame:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = ScrollFrame:GetScale() - Returns the frame's scale factor
handler = ScrollFrame:GetScript("scriptType") - Returns the widget's handler function for a script
scrollChild = ScrollFrame:GetScrollChild() - Returns the frame scrolled by the scroll frame
width, height = ScrollFrame:GetSize() - Returns the width and height of the region
region = ScrollFrame:GetTitleRegion() - Returns the frame's TitleRegion object
top = ScrollFrame:GetTop() - Returns the distance from the bottom of the screen to the top of the region
scroll = ScrollFrame:GetVerticalScroll() - Returns the scroll frame's current vertical scroll position
maxScroll = ScrollFrame:GetVerticalScrollRange() - Returns the scroll frame's maximum vertical (bottom) scroll position
width = ScrollFrame:GetWidth() - Returns the width of the region
hasScript = ScrollFrame:HasScript("scriptType") - Returns whether the widget supports a script handler
ScrollFrame:Hide() - Hides the region
ScrollFrame:HookScript("scriptType", handler) - Securely hooks a script handler
ScrollFrame:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = ScrollFrame:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = ScrollFrame:IsDragging() - Returns whether the region is currently being dragged
registered = ScrollFrame:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = ScrollFrame:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = ScrollFrame:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = ScrollFrame:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = ScrollFrame:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = ScrollFrame:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = ScrollFrame:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = ScrollFrame:IsMovable() - Returns whether the frame can be moved by the user
isType = ScrollFrame:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = ScrollFrame:IsProtected() - Returns whether the region is protected
enabled = ScrollFrame:IsResizable() - Returns whether the frame can be resized by the user
shown = ScrollFrame:IsShown() - Returns whether the region is shown
enabled = ScrollFrame:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = ScrollFrame:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = ScrollFrame:IsVisible() - Returns whether the region is visible
ScrollFrame:Lower() - Reduces the frame's frame level below all other frames in its strata
ScrollFrame:Raise() - Increases the frame's frame level above all other frames in its strata
ScrollFrame:RegisterAllEvents() - Registers the frame for all events
ScrollFrame:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
ScrollFrame:RegisterForDrag(...) - Registers the frame for dragging
ScrollFrame:SetAllPoints([region]) or ScrollFrame:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
ScrollFrame:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
ScrollFrame:SetAttribute("name", value) - Sets a secure frame attribute
ScrollFrame:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
ScrollFrame:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
ScrollFrame:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
ScrollFrame:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
ScrollFrame:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
ScrollFrame:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
ScrollFrame:SetDontSavePosition() - This function is not yet documented
ScrollFrame:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
ScrollFrame:SetFrameStrata("strata") - Sets the general layering strata of the frame
ScrollFrame:SetHeight(height) - Sets the region's height
ScrollFrame:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
ScrollFrame:SetHorizontalScroll(scroll) - Sets the scroll frame's horizontal scroll position
ScrollFrame:SetID(id) - Sets a numeric identifier for the frame
ScrollFrame:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
ScrollFrame:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
ScrollFrame:SetMovable(enable) - Sets whether the frame can be moved by the user
ScrollFrame:SetParent(frame) or ScrollFrame:SetParent("name") - Makes another frame the parent of this region
ScrollFrame:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
ScrollFrame:SetPropagateKeyboardInput() - This function is not yet documented
ScrollFrame:SetResizable(enable) - Sets whether the frame can be resized by the user
ScrollFrame:SetScale(scale) - Sets the frame's scale factor
ScrollFrame:SetScript("scriptType", handler) - Sets the widget's handler function for a script
ScrollFrame:SetScrollChild(frame) - Sets the scroll child for the scroll frame
ScrollFrame:SetSize(width, height) - Sets the size of the region to the specified values
ScrollFrame:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
ScrollFrame:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
ScrollFrame:SetVerticalScroll(scroll) - Sets the scroll frame's vertical scroll position
ScrollFrame:SetWidth(width) - Sets the region's width
ScrollFrame:Show() - Shows the region
ScrollFrame:StartMoving() - Begins repositioning the frame via mouse movement
ScrollFrame:StartSizing() - Begins resizing the frame via mouse movement
ScrollFrame:StopAnimating() - Stops any active animations involving the region or its children
ScrollFrame:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
ScrollFrame:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
ScrollFrame:UnregisterEvent("event") - Unregisters the frame for an event
ScrollFrame:UpdateScrollChildRect() - Updates the position of the scroll frame's child
ScrollingMessageFrame

ScrollingMessageFrame:AddMessage("text" [, red [, green [, blue [, id [, addToTop]]]]]) - Adds a message to those listed in the frame
ScrollingMessageFrame:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
atBottom = ScrollingMessageFrame:AtBottom() - Returns whether the message frame is currently scrolled to the bottom of its contents
atTop = ScrollingMessageFrame:AtTop() - Returns whether the message frame is currently scrolled to the top of its contents
enabled = ScrollingMessageFrame:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = ScrollingMessageFrame:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
ScrollingMessageFrame:Clear() - Removes all messages stored or displayed in the frame
ScrollingMessageFrame:ClearAllPoints() - Removes all anchor points from the region
animationGroup = ScrollingMessageFrame:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = ScrollingMessageFrame:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = ScrollingMessageFrame:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = ScrollingMessageFrame:CreateTitleRegion() - Creates a title region for dragging the frame
ScrollingMessageFrame:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
ScrollingMessageFrame:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
ScrollingMessageFrame:EnableJoystick(enable) - Enables or disables joystick interactivity
ScrollingMessageFrame:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
ScrollingMessageFrame:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
ScrollingMessageFrame:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
alpha = ScrollingMessageFrame:GetAlpha() - Returns the opacity of the region relative to its parent
... = ScrollingMessageFrame:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = ScrollingMessageFrame:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = ScrollingMessageFrame:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = ScrollingMessageFrame:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = ScrollingMessageFrame:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = ScrollingMessageFrame:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = ScrollingMessageFrame:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = ScrollingMessageFrame:GetCenter() - Returns the screen coordinates of the region's center
... = ScrollingMessageFrame:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = ScrollingMessageFrame:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
lineNum = ScrollingMessageFrame:GetCurrentLine() - Returns a number identifying the last message added to the frame
offset = ScrollingMessageFrame:GetCurrentScroll() - Returns the message frame's current scroll position
depth = ScrollingMessageFrame:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
ScrollingMessageFrame:GetDontSavePosition() - This function is not yet documented
alpha = ScrollingMessageFrame:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = ScrollingMessageFrame:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = ScrollingMessageFrame:GetEffectiveScale() - Returns the overall scale factor of the frame
duration = ScrollingMessageFrame:GetFadeDuration() - Returns the duration of the fade-out animation for disappearing messages
fading = ScrollingMessageFrame:GetFading() - Returns whether messages added to the frame automatically fade out after a period of time
filename, fontHeight, flags = ScrollingMessageFrame:GetFont() - Returns the font instance's basic font properties
font = ScrollingMessageFrame:GetFontObject() - Returns the `Font` object from which the font instance's properties are inherited
level = ScrollingMessageFrame:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = ScrollingMessageFrame:GetFrameStrata() - Returns the general layering strata of the frame
height = ScrollingMessageFrame:GetHeight() - Returns the height of the region
left, right, top, bottom = ScrollingMessageFrame:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
enabled = ScrollingMessageFrame:GetHyperlinksEnabled() - Returns whether hyperlinks in the frame's text are interactive
id = ScrollingMessageFrame:GetID() - Returns the frame's numeric identifier
indent = ScrollingMessageFrame:GetIndentedWordWrap() - Returns whether long lines of text are indented when wrapping
position = ScrollingMessageFrame:GetInsertMode() - Returns the position at which new messages are added to the frame
justify = ScrollingMessageFrame:GetJustifyH() - Returns the font instance's horizontal text alignment style
justify = ScrollingMessageFrame:GetJustifyV() - Returns the font instance's vertical text alignment style
left = ScrollingMessageFrame:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
ScrollingMessageFrame:GetMaxLines(maxLines) - Returns the maximum number of messages kept in the frame
maxWidth, maxHeight = ScrollingMessageFrame:GetMaxResize() - Returns the maximum size of the frame for user resizing
ScrollingMessageFrame:GetMessageInfo() - This function is not yet documented
minWidth, minHeight = ScrollingMessageFrame:GetMinResize() - Returns the minimum size of the frame for user resizing
name = ScrollingMessageFrame:GetName() - Returns the widget object's name
numChildren = ScrollingMessageFrame:GetNumChildren() - Returns the number of child frames belonging to the frame
count = ScrollingMessageFrame:GetNumLinesDisplayed() - Returns the number of lines displayed in the message frame
count = ScrollingMessageFrame:GetNumMessages() - Returns the number of messages currently kept in the frame's message history
numPoints = ScrollingMessageFrame:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = ScrollingMessageFrame:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = ScrollingMessageFrame:GetObjectType() - Returns the object's widget type
parent = ScrollingMessageFrame:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = ScrollingMessageFrame:GetPoint(index) - Returns information about one of the region's anchor points
ScrollingMessageFrame:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = ScrollingMessageFrame:GetRect() - Returns the position and dimensions of the region
... = ScrollingMessageFrame:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = ScrollingMessageFrame:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = ScrollingMessageFrame:GetScale() - Returns the frame's scale factor
handler = ScrollingMessageFrame:GetScript("scriptType") - Returns the widget's handler function for a script
shadowR, shadowG, shadowB, shadowAlpha = ScrollingMessageFrame:GetShadowColor() - Returns the color of the font's text shadow
xOffset, yOffset = ScrollingMessageFrame:GetShadowOffset() - Returns the offset of the font instance's text shadow from its text
width, height = ScrollingMessageFrame:GetSize() - Returns the width and height of the region
spacing = ScrollingMessageFrame:GetSpacing() - Returns the font instance's amount of spacing between lines
textR, textG, textB, textAlpha = ScrollingMessageFrame:GetTextColor() - Returns the font instance's default text color
time = ScrollingMessageFrame:GetTimeVisible() - Returns the amount of time for which a message remains visible before beginning to fade out
region = ScrollingMessageFrame:GetTitleRegion() - Returns the frame's TitleRegion object
top = ScrollingMessageFrame:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = ScrollingMessageFrame:GetWidth() - Returns the width of the region
hasScript = ScrollingMessageFrame:HasScript("scriptType") - Returns whether the widget supports a script handler
ScrollingMessageFrame:Hide() - Hides the region
ScrollingMessageFrame:HookScript("scriptType", handler) - Securely hooks a script handler
ScrollingMessageFrame:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = ScrollingMessageFrame:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = ScrollingMessageFrame:IsDragging() - Returns whether the region is currently being dragged
registered = ScrollingMessageFrame:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = ScrollingMessageFrame:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = ScrollingMessageFrame:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = ScrollingMessageFrame:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = ScrollingMessageFrame:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = ScrollingMessageFrame:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = ScrollingMessageFrame:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = ScrollingMessageFrame:IsMovable() - Returns whether the frame can be moved by the user
isType = ScrollingMessageFrame:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = ScrollingMessageFrame:IsProtected() - Returns whether the region is protected
enabled = ScrollingMessageFrame:IsResizable() - Returns whether the frame can be resized by the user
shown = ScrollingMessageFrame:IsShown() - Returns whether the region is shown
enabled = ScrollingMessageFrame:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = ScrollingMessageFrame:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = ScrollingMessageFrame:IsVisible() - Returns whether the region is visible
ScrollingMessageFrame:Lower() - Reduces the frame's frame level below all other frames in its strata
ScrollingMessageFrame:PageDown() - Scrolls the message frame's contents down by one page
ScrollingMessageFrame:PageUp() - Scrolls the message frame's contents up by one page
ScrollingMessageFrame:Raise() - Increases the frame's frame level above all other frames in its strata
ScrollingMessageFrame:RegisterAllEvents() - Registers the frame for all events
ScrollingMessageFrame:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
ScrollingMessageFrame:RegisterForDrag(...) - Registers the frame for dragging
ScrollingMessageFrame:RemoveMessagesByAccessID() - This function is not yet documented
ScrollingMessageFrame:ScrollDown() - Scrolls the message frame's contents down by two lines
ScrollingMessageFrame:ScrollToBottom() - Scrolls to the bottom of the message frame's contents
ScrollingMessageFrame:ScrollToTop() - Scrolls to the top of the message frame's contents
ScrollingMessageFrame:ScrollUp() - Scrolls the message frame's contents up by two lines
ScrollingMessageFrame:SetAllPoints([region]) or ScrollingMessageFrame:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
ScrollingMessageFrame:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
ScrollingMessageFrame:SetAttribute("name", value) - Sets a secure frame attribute
ScrollingMessageFrame:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
ScrollingMessageFrame:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
ScrollingMessageFrame:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
ScrollingMessageFrame:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
ScrollingMessageFrame:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
ScrollingMessageFrame:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
ScrollingMessageFrame:SetDontSavePosition() - This function is not yet documented
ScrollingMessageFrame:SetFadeDuration(duration) - Sets the duration of the fade-out animation for disappearing messages
ScrollingMessageFrame:SetFading(fading) - Sets whether messages added to the frame automatically fade out after a period of time
isValid = ScrollingMessageFrame:SetFont("filename", fontHeight, "flags") - Sets the font instance's basic font properties
ScrollingMessageFrame:SetFontObject(object) or ScrollingMessageFrame:SetFontObject("name") - Sets the `Font` object from which the font instance's properties are inherited
ScrollingMessageFrame:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
ScrollingMessageFrame:SetFrameStrata("strata") - Sets the general layering strata of the frame
ScrollingMessageFrame:SetHeight(height) - Sets the region's height
ScrollingMessageFrame:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
ScrollingMessageFrame:SetHyperlinksEnabled(enable) - Enables or disables hyperlink interactivity in the frame
ScrollingMessageFrame:SetID(id) - Sets a numeric identifier for the frame
ScrollingMessageFrame:SetIndentedWordWrap(indent) - Sets whether long lines of text are indented when wrapping
ScrollingMessageFrame:SetInsertMode("position") - Sets the position at which new messages are added to the frame
ScrollingMessageFrame:SetJustifyH("justify") - Sets the font instance's horizontal text alignment style
ScrollingMessageFrame:SetJustifyV("justify") - Sets the font instance's vertical text alignment style
ScrollingMessageFrame:SetMaxLines(maxLines) - Sets the maximum number of messages to be kept in the frame
ScrollingMessageFrame:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
ScrollingMessageFrame:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
ScrollingMessageFrame:SetMovable(enable) - Sets whether the frame can be moved by the user
ScrollingMessageFrame:SetParent(frame) or ScrollingMessageFrame:SetParent("name") - Makes another frame the parent of this region
ScrollingMessageFrame:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
ScrollingMessageFrame:SetPropagateKeyboardInput() - This function is not yet documented
ScrollingMessageFrame:SetResizable(enable) - Sets whether the frame can be resized by the user
ScrollingMessageFrame:SetScale(scale) - Sets the frame's scale factor
ScrollingMessageFrame:SetScript("scriptType", handler) - Sets the widget's handler function for a script
ScrollingMessageFrame:SetScrollOffset(offset) - Sets the message frame's scroll position
ScrollingMessageFrame:SetShadowColor(shadowR, shadowG, shadowB, shadowAlpha) - Sets the color of the font's text shadow
ScrollingMessageFrame:SetShadowOffset(xOffset, yOffset) - Sets the offset of the font instance's text shadow from its text
ScrollingMessageFrame:SetSize(width, height) - Sets the size of the region to the specified values
ScrollingMessageFrame:SetSpacing(spacing) - Sets the font instance's amount of spacing between lines
ScrollingMessageFrame:SetTextColor(textR, textG, textB, textAlpha) - Sets the font instance's default text color
ScrollingMessageFrame:SetTimeVisible(time) - Sets the amount of time for which a message remains visible before beginning to fade out
ScrollingMessageFrame:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
ScrollingMessageFrame:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
ScrollingMessageFrame:SetWidth(width) - Sets the region's width
ScrollingMessageFrame:Show() - Shows the region
ScrollingMessageFrame:StartMoving() - Begins repositioning the frame via mouse movement
ScrollingMessageFrame:StartSizing() - Begins resizing the frame via mouse movement
ScrollingMessageFrame:StopAnimating() - Stops any active animations involving the region or its children
ScrollingMessageFrame:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
ScrollingMessageFrame:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
ScrollingMessageFrame:UnregisterEvent("event") - Unregisters the frame for an event
ScrollingMessageFrame:UpdateColorByID(id, red, green, blue) - Updates the color of a set of messages already added to the frame
SimpleHTML

SimpleHTML:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = SimpleHTML:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = SimpleHTML:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
SimpleHTML:ClearAllPoints() - Removes all anchor points from the region
animationGroup = SimpleHTML:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = SimpleHTML:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = SimpleHTML:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = SimpleHTML:CreateTitleRegion() - Creates a title region for dragging the frame
SimpleHTML:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
SimpleHTML:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
SimpleHTML:EnableJoystick(enable) - Enables or disables joystick interactivity
SimpleHTML:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
SimpleHTML:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
SimpleHTML:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
alpha = SimpleHTML:GetAlpha() - Returns the opacity of the region relative to its parent
... = SimpleHTML:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = SimpleHTML:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = SimpleHTML:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = SimpleHTML:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = SimpleHTML:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = SimpleHTML:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = SimpleHTML:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = SimpleHTML:GetCenter() - Returns the screen coordinates of the region's center
... = SimpleHTML:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = SimpleHTML:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = SimpleHTML:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
SimpleHTML:GetDontSavePosition() - This function is not yet documented
alpha = SimpleHTML:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = SimpleHTML:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = SimpleHTML:GetEffectiveScale() - Returns the overall scale factor of the frame
filename, fontHeight, flags = SimpleHTML:GetFont(["element"]) - Returns basic properties of a font used in the frame
font = SimpleHTML:GetFontObject(["element"]) - Returns the `Font` object from which the properties of a font used in the frame are inherited
level = SimpleHTML:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = SimpleHTML:GetFrameStrata() - Returns the general layering strata of the frame
height = SimpleHTML:GetHeight() - Returns the height of the region
left, right, top, bottom = SimpleHTML:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
format = SimpleHTML:GetHyperlinkFormat() - Returns the format string used for displaying hyperlinks in the frame
enabled = SimpleHTML:GetHyperlinksEnabled() - Returns whether hyperlinks in the frame's text are interactive
id = SimpleHTML:GetID() - Returns the frame's numeric identifier
indent = SimpleHTML:GetIndentedWordWrap(["element"]) - Returns whether long lines of text are indented when wrapping
justify = SimpleHTML:GetJustifyH(["element"]) - Returns the horizontal alignment style for text in the frame
justify = SimpleHTML:GetJustifyV(["element"]) - Returns the vertical alignment style for text in the frame
left = SimpleHTML:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
maxWidth, maxHeight = SimpleHTML:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = SimpleHTML:GetMinResize() - Returns the minimum size of the frame for user resizing
name = SimpleHTML:GetName() - Returns the widget object's name
numChildren = SimpleHTML:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = SimpleHTML:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = SimpleHTML:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = SimpleHTML:GetObjectType() - Returns the object's widget type
parent = SimpleHTML:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = SimpleHTML:GetPoint(index) - Returns information about one of the region's anchor points
SimpleHTML:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = SimpleHTML:GetRect() - Returns the position and dimensions of the region
... = SimpleHTML:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = SimpleHTML:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = SimpleHTML:GetScale() - Returns the frame's scale factor
handler = SimpleHTML:GetScript("scriptType") - Returns the widget's handler function for a script
shadowR, shadowG, shadowB, shadowAlpha = SimpleHTML:GetShadowColor(["element"]) - Returns the shadow color for text in the frame
xOffset, yOffset = SimpleHTML:GetShadowOffset(["element"]) - Returns the offset of text shadow from text in the frame
width, height = SimpleHTML:GetSize() - Returns the width and height of the region
spacing = SimpleHTML:GetSpacing(["element"]) - Returns the amount of spacing between lines of text in the frame
textR, textG, textB, textAlpha = SimpleHTML:GetTextColor(["element"]) - Returns the color of text in the frame
region = SimpleHTML:GetTitleRegion() - Returns the frame's TitleRegion object
top = SimpleHTML:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = SimpleHTML:GetWidth() - Returns the width of the region
hasScript = SimpleHTML:HasScript("scriptType") - Returns whether the widget supports a script handler
SimpleHTML:Hide() - Hides the region
SimpleHTML:HookScript("scriptType", handler) - Securely hooks a script handler
SimpleHTML:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = SimpleHTML:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = SimpleHTML:IsDragging() - Returns whether the region is currently being dragged
registered = SimpleHTML:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = SimpleHTML:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = SimpleHTML:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = SimpleHTML:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = SimpleHTML:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = SimpleHTML:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = SimpleHTML:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = SimpleHTML:IsMovable() - Returns whether the frame can be moved by the user
isType = SimpleHTML:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = SimpleHTML:IsProtected() - Returns whether the region is protected
enabled = SimpleHTML:IsResizable() - Returns whether the frame can be resized by the user
shown = SimpleHTML:IsShown() - Returns whether the region is shown
enabled = SimpleHTML:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = SimpleHTML:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = SimpleHTML:IsVisible() - Returns whether the region is visible
SimpleHTML:Lower() - Reduces the frame's frame level below all other frames in its strata
SimpleHTML:Raise() - Increases the frame's frame level above all other frames in its strata
SimpleHTML:RegisterAllEvents() - Registers the frame for all events
SimpleHTML:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
SimpleHTML:RegisterForDrag(...) - Registers the frame for dragging
SimpleHTML:SetAllPoints([region]) or SimpleHTML:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
SimpleHTML:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
SimpleHTML:SetAttribute("name", value) - Sets a secure frame attribute
SimpleHTML:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
SimpleHTML:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
SimpleHTML:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
SimpleHTML:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
SimpleHTML:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
SimpleHTML:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
SimpleHTML:SetDontSavePosition() - This function is not yet documented
isValid = SimpleHTML:SetFont(["element",] "filename", fontHeight, "flags") - Sets basic properties of a font used in the frame
SimpleHTML:SetFontObject(["element",] font) or SimpleHTML:SetFontObject(["element",] "name") - Sets the `Font` object from which the properties of a font used in the frame are inherited
SimpleHTML:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
SimpleHTML:SetFrameStrata("strata") - Sets the general layering strata of the frame
SimpleHTML:SetHeight(height) - Sets the region's height
SimpleHTML:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
SimpleHTML:SetHyperlinkFormat("format") - Sets the format string used for displaying hyperlinks in the frame
SimpleHTML:SetHyperlinksEnabled(enable) - Enables or disables hyperlink interactivity in the frame
SimpleHTML:SetID(id) - Sets a numeric identifier for the frame
SimpleHTML:SetIndentedWordWrap(["element",] indent) - Sets whether long lines of text are indented when wrapping
SimpleHTML:SetJustifyH(["element",] "justify") - Sets the horizontal alignment style for text in the frame
SimpleHTML:SetJustifyV(["element",] "justify") - Sets the vertical alignment style for text in the frame
SimpleHTML:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
SimpleHTML:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
SimpleHTML:SetMovable(enable) - Sets whether the frame can be moved by the user
SimpleHTML:SetParent(frame) or SimpleHTML:SetParent("name") - Makes another frame the parent of this region
SimpleHTML:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
SimpleHTML:SetPropagateKeyboardInput() - This function is not yet documented
SimpleHTML:SetResizable(enable) - Sets whether the frame can be resized by the user
SimpleHTML:SetScale(scale) - Sets the frame's scale factor
SimpleHTML:SetScript("scriptType", handler) - Sets the widget's handler function for a script
SimpleHTML:SetShadowColor(["element",] shadowR, shadowG, shadowB, shadowAlpha) - Sets the shadow color for text in the frame
SimpleHTML:SetShadowOffset(["element",] xOffset, yOffset) - Returns the offset of text shadow from text in the frame
SimpleHTML:SetSize(width, height) - Sets the size of the region to the specified values
SimpleHTML:SetSpacing(["element",] spacing) - Sets the amount of spacing between lines of text in the frame
SimpleHTML:SetText("text") - Sets the text to be displayed in the SimpleHTML frame
SimpleHTML:SetTextColor(["element",] textR, textG, textB, textAlpha) - Sets the color of text in the frame
SimpleHTML:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
SimpleHTML:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
SimpleHTML:SetWidth(width) - Sets the region's width
SimpleHTML:Show() - Shows the region
SimpleHTML:StartMoving() - Begins repositioning the frame via mouse movement
SimpleHTML:StartSizing() - Begins resizing the frame via mouse movement
SimpleHTML:StopAnimating() - Stops any active animations involving the region or its children
SimpleHTML:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
SimpleHTML:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
SimpleHTML:UnregisterEvent("event") - Unregisters the frame for an event
Slider

Slider:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = Slider:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = Slider:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
Slider:ClearAllPoints() - Removes all anchor points from the region
animationGroup = Slider:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = Slider:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = Slider:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = Slider:CreateTitleRegion() - Creates a title region for dragging the frame
Slider:Disable() - Disallows user interaction with the slider
Slider:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
Slider:Enable() - Allows user interaction with the slider
Slider:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
Slider:EnableJoystick(enable) - Enables or disables joystick interactivity
Slider:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
Slider:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
Slider:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
alpha = Slider:GetAlpha() - Returns the opacity of the region relative to its parent
... = Slider:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = Slider:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = Slider:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = Slider:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = Slider:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = Slider:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = Slider:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = Slider:GetCenter() - Returns the screen coordinates of the region's center
... = Slider:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = Slider:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = Slider:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
Slider:GetDontSavePosition() - This function is not yet documented
alpha = Slider:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = Slider:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = Slider:GetEffectiveScale() - Returns the overall scale factor of the frame
level = Slider:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = Slider:GetFrameStrata() - Returns the general layering strata of the frame
height = Slider:GetHeight() - Returns the height of the region
left, right, top, bottom = Slider:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = Slider:GetID() - Returns the frame's numeric identifier
left = Slider:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
maxWidth, maxHeight = Slider:GetMaxResize() - Returns the maximum size of the frame for user resizing
minValue, maxValue = Slider:GetMinMaxValues() - Returns the minimum and maximum values for the slider
minWidth, minHeight = Slider:GetMinResize() - Returns the minimum size of the frame for user resizing
name = Slider:GetName() - Returns the widget object's name
numChildren = Slider:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = Slider:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = Slider:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = Slider:GetObjectType() - Returns the object's widget type
orientation = Slider:GetOrientation() - Returns the orientation of the slider
parent = Slider:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = Slider:GetPoint(index) - Returns information about one of the region's anchor points
Slider:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = Slider:GetRect() - Returns the position and dimensions of the region
... = Slider:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = Slider:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = Slider:GetScale() - Returns the frame's scale factor
handler = Slider:GetScript("scriptType") - Returns the widget's handler function for a script
width, height = Slider:GetSize() - Returns the width and height of the region
texture = Slider:GetThumbTexture() - Returns the texture for the slider thumb
region = Slider:GetTitleRegion() - Returns the frame's TitleRegion object
top = Slider:GetTop() - Returns the distance from the bottom of the screen to the top of the region
value = Slider:GetValue() - Returns the value representing the current position of the slider thumb
step = Slider:GetValueStep() - Returns the minimum increment between allowed slider values
width = Slider:GetWidth() - Returns the width of the region
hasScript = Slider:HasScript("scriptType") - Returns whether the widget supports a script handler
Slider:Hide() - Hides the region
Slider:HookScript("scriptType", handler) - Securely hooks a script handler
Slider:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = Slider:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = Slider:IsDragging() - Returns whether the region is currently being dragged
enabled = Slider:IsEnabled() - Returns whether user interaction with the slider is allowed
registered = Slider:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = Slider:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = Slider:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = Slider:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = Slider:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = Slider:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = Slider:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = Slider:IsMovable() - Returns whether the frame can be moved by the user
isType = Slider:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = Slider:IsProtected() - Returns whether the region is protected
enabled = Slider:IsResizable() - Returns whether the frame can be resized by the user
shown = Slider:IsShown() - Returns whether the region is shown
enabled = Slider:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = Slider:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = Slider:IsVisible() - Returns whether the region is visible
Slider:Lower() - Reduces the frame's frame level below all other frames in its strata
Slider:Raise() - Increases the frame's frame level above all other frames in its strata
Slider:RegisterAllEvents() - Registers the frame for all events
Slider:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
Slider:RegisterForDrag(...) - Registers the frame for dragging
Slider:SetAllPoints([region]) or Slider:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
Slider:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
Slider:SetAttribute("name", value) - Sets a secure frame attribute
Slider:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
Slider:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
Slider:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
Slider:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
Slider:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
Slider:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
Slider:SetDontSavePosition() - This function is not yet documented
Slider:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
Slider:SetFrameStrata("strata") - Sets the general layering strata of the frame
Slider:SetHeight(height) - Sets the region's height
Slider:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
Slider:SetID(id) - Sets a numeric identifier for the frame
Slider:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
Slider:SetMinMaxValues(minValue, maxValue) - Sets the minimum and maximum values for the slider
Slider:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
Slider:SetMovable(enable) - Sets whether the frame can be moved by the user
Slider:SetOrientation("orientation") - Sets the orientation of the slider
Slider:SetParent(frame) or Slider:SetParent("name") - Makes another frame the parent of this region
Slider:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
Slider:SetPropagateKeyboardInput() - This function is not yet documented
Slider:SetResizable(enable) - Sets whether the frame can be resized by the user
Slider:SetScale(scale) - Sets the frame's scale factor
Slider:SetScript("scriptType", handler) - Sets the widget's handler function for a script
Slider:SetSize(width, height) - Sets the size of the region to the specified values
Slider:SetThumbTexture(texture [, "layer"]) or Slider:SetThumbTexture("filename" [, "layer"]) - Sets the texture for the slider thumb
Slider:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
Slider:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
Slider:SetValue(value) - Sets the value representing the position of the slider thumb
Slider:SetValueStep(step) - Sets the minimum increment between allowed slider values
Slider:SetWidth(width) - Sets the region's width
Slider:Show() - Shows the region
Slider:StartMoving() - Begins repositioning the frame via mouse movement
Slider:StartSizing() - Begins resizing the frame via mouse movement
Slider:StopAnimating() - Stops any active animations involving the region or its children
Slider:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
Slider:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
Slider:UnregisterEvent("event") - Unregisters the frame for an event
StatusBar

StatusBar:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = StatusBar:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = StatusBar:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
StatusBar:ClearAllPoints() - Removes all anchor points from the region
animationGroup = StatusBar:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = StatusBar:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = StatusBar:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = StatusBar:CreateTitleRegion() - Creates a title region for dragging the frame
StatusBar:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
StatusBar:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
StatusBar:EnableJoystick(enable) - Enables or disables joystick interactivity
StatusBar:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
StatusBar:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
StatusBar:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
alpha = StatusBar:GetAlpha() - Returns the opacity of the region relative to its parent
... = StatusBar:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = StatusBar:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = StatusBar:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = StatusBar:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = StatusBar:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = StatusBar:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = StatusBar:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = StatusBar:GetCenter() - Returns the screen coordinates of the region's center
... = StatusBar:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = StatusBar:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = StatusBar:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
StatusBar:GetDontSavePosition() - This function is not yet documented
alpha = StatusBar:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = StatusBar:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = StatusBar:GetEffectiveScale() - Returns the overall scale factor of the frame
level = StatusBar:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = StatusBar:GetFrameStrata() - Returns the general layering strata of the frame
height = StatusBar:GetHeight() - Returns the height of the region
left, right, top, bottom = StatusBar:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = StatusBar:GetID() - Returns the frame's numeric identifier
left = StatusBar:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
maxWidth, maxHeight = StatusBar:GetMaxResize() - Returns the maximum size of the frame for user resizing
minValue, maxValue = StatusBar:GetMinMaxValues() - Returns the minimum and maximum values of the status bar
minWidth, minHeight = StatusBar:GetMinResize() - Returns the minimum size of the frame for user resizing
name = StatusBar:GetName() - Returns the widget object's name
numChildren = StatusBar:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = StatusBar:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = StatusBar:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = StatusBar:GetObjectType() - Returns the object's widget type
orientation = StatusBar:GetOrientation() - Returns the orientation of the status bar
parent = StatusBar:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = StatusBar:GetPoint(index) - Returns information about one of the region's anchor points
StatusBar:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = StatusBar:GetRect() - Returns the position and dimensions of the region
... = StatusBar:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = StatusBar:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
rotate = StatusBar:GetRotatesTexture() - Returns whether the status bar's texture is rotated to match its orientation
scale = StatusBar:GetScale() - Returns the frame's scale factor
handler = StatusBar:GetScript("scriptType") - Returns the widget's handler function for a script
width, height = StatusBar:GetSize() - Returns the width and height of the region
red, green, blue, alpha = StatusBar:GetStatusBarColor() - Returns the color shading used for the status bar's texture
texture = StatusBar:GetStatusBarTexture() - Returns the `Texture` object used for drawing the filled-in portion of the status bar
region = StatusBar:GetTitleRegion() - Returns the frame's TitleRegion object
top = StatusBar:GetTop() - Returns the distance from the bottom of the screen to the top of the region
value = StatusBar:GetValue() - Returns the current value of the status bar
width = StatusBar:GetWidth() - Returns the width of the region
hasScript = StatusBar:HasScript("scriptType") - Returns whether the widget supports a script handler
StatusBar:Hide() - Hides the region
StatusBar:HookScript("scriptType", handler) - Securely hooks a script handler
StatusBar:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = StatusBar:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = StatusBar:IsDragging() - Returns whether the region is currently being dragged
registered = StatusBar:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = StatusBar:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = StatusBar:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = StatusBar:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = StatusBar:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = StatusBar:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = StatusBar:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = StatusBar:IsMovable() - Returns whether the frame can be moved by the user
isType = StatusBar:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = StatusBar:IsProtected() - Returns whether the region is protected
enabled = StatusBar:IsResizable() - Returns whether the frame can be resized by the user
shown = StatusBar:IsShown() - Returns whether the region is shown
enabled = StatusBar:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = StatusBar:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = StatusBar:IsVisible() - Returns whether the region is visible
StatusBar:Lower() - Reduces the frame's frame level below all other frames in its strata
StatusBar:Raise() - Increases the frame's frame level above all other frames in its strata
StatusBar:RegisterAllEvents() - Registers the frame for all events
StatusBar:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
StatusBar:RegisterForDrag(...) - Registers the frame for dragging
StatusBar:SetAllPoints([region]) or StatusBar:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
StatusBar:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
StatusBar:SetAttribute("name", value) - Sets a secure frame attribute
StatusBar:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
StatusBar:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
StatusBar:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
StatusBar:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
StatusBar:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
StatusBar:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
StatusBar:SetDontSavePosition() - This function is not yet documented
StatusBar:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
StatusBar:SetFrameStrata("strata") - Sets the general layering strata of the frame
StatusBar:SetHeight(height) - Sets the region's height
StatusBar:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
StatusBar:SetID(id) - Sets a numeric identifier for the frame
StatusBar:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
StatusBar:SetMinMaxValues(minValue, maxValue) - Sets the minimum and maximum values of the status bar
StatusBar:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
StatusBar:SetMovable(enable) - Sets whether the frame can be moved by the user
StatusBar:SetOrientation("orientation") - Sets the orientation of the status bar
StatusBar:SetParent(frame) or StatusBar:SetParent("name") - Makes another frame the parent of this region
StatusBar:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
StatusBar:SetPropagateKeyboardInput() - This function is not yet documented
StatusBar:SetResizable(enable) - Sets whether the frame can be resized by the user
StatusBar:SetRotatesTexture(rotate) - Sets whether the status bar's texture is rotated to match its orientation
StatusBar:SetScale(scale) - Sets the frame's scale factor
StatusBar:SetScript("scriptType", handler) - Sets the widget's handler function for a script
StatusBar:SetSize(width, height) - Sets the size of the region to the specified values
StatusBar:SetStatusBarColor(red, green, blue [, alpha]) - Sets the color shading for the status bar's texture
StatusBar:SetStatusBarTexture(texture [, "layer"]) or StatusBar:SetStatusBarTexture("filename" [, "layer"]) - Sets the texture used for drawing the filled-in portion of the status bar
StatusBar:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
StatusBar:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
StatusBar:SetValue(value) - Sets the value of the status bar
StatusBar:SetWidth(width) - Sets the region's width
StatusBar:Show() - Shows the region
StatusBar:StartMoving() - Begins repositioning the frame via mouse movement
StatusBar:StartSizing() - Begins resizing the frame via mouse movement
StatusBar:StopAnimating() - Stops any active animations involving the region or its children
StatusBar:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
StatusBar:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
StatusBar:UnregisterEvent("event") - Unregisters the frame for an event
TabardModel

TabardModel:AdvanceTime() - Advances to the model's next animation frame
TabardModel:AllowAttributeChanges() - Temporarily allows insecure code to modify the frame's attributes during combat
enabled = TabardModel:CanChangeAttribute() - Returns whether secure frame attributes can currently be changed
canChange = TabardModel:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
enabled = TabardModel:CanSaveTabardNow() - Returns whether the tabard model's current design can be saved as the player's guild tabard
TabardModel:ClearAllPoints() - Removes all anchor points from the region
TabardModel:ClearFog() - Disables fog display for the model.
TabardModel:ClearModel() - Removes the 3D model currently displayed
animationGroup = TabardModel:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
fontstring = TabardModel:CreateFontString(["name" [, "layer" [, "inherits"]]]) - Creates a new [[docs/widgets/FontString|`FontString`]] as a child of the frame
texture = TabardModel:CreateTexture(["name" [, "layer" [, "inherits" [, sublevel]]]]) - Creates a new [[docs/widgets/Texture|`Texture`]] as a child of the frame
region = TabardModel:CreateTitleRegion() - Creates a title region for dragging the frame
TabardModel:CycleVariation(variable, delta) - Cycles through available design variations for the tabard model
TabardModel:DisableDrawLayer("layer") - Prevents display of all child objects of the frame on a specified graphics layer
TabardModel:EnableDrawLayer("layer") - Allows display of all child objects of the frame on a specified graphics layer
TabardModel:EnableJoystick(enable) - Enables or disables joystick interactivity
TabardModel:EnableKeyboard(enable) - Enables or disables keyboard interactivity for the frame
TabardModel:EnableMouse(enable) - Enables or disables mouse interactivity for the frame
TabardModel:EnableMouseWheel(enable) - Enables or disables mouse wheel interactivity for the frame
alpha = TabardModel:GetAlpha() - Returns the opacity of the region relative to its parent
... = TabardModel:GetAnimationGroups() - Returns a list of animation groups belonging to the region
value = TabardModel:GetAttribute("name") - Returns the value of a secure frame attribute
backdrop = TabardModel:GetBackdrop() - Returns information about the frame's backdrop graphic
red, green, blue, alpha = TabardModel:GetBackdropBorderColor() - Returns the shading color for the frame's border graphic
red, green, blue, alpha = TabardModel:GetBackdropColor() - Returns the shading color for the frame's background graphic
bottom = TabardModel:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
left, bottom, width, height = TabardModel:GetBoundsRect() - Returns the position and dimension of the smallest area enclosing the frame and its children
x, y = TabardModel:GetCenter() - Returns the screen coordinates of the region's center
... = TabardModel:GetChildren() - Returns a list of child frames of the frame
left, right, top, bottom = TabardModel:GetClampRectInsets() - Returns offsets from the frame's edges used when limiting user movement or resizing of the frame
depth = TabardModel:GetDepth() - Returns the 3D depth of the frame (for stereoscopic 3D setups)
TabardModel:GetDontSavePosition() - This function is not yet documented
alpha = TabardModel:GetEffectiveAlpha() - Returns the overall opacity of the frame
depth = TabardModel:GetEffectiveDepth() - Returns the overall 3D depth of the frame (for stereoscopic 3D configurations)
scale = TabardModel:GetEffectiveScale() - Returns the overall scale factor of the frame
facing = TabardModel:GetFacing() - Returns the model's current rotation setting
red, green, blue = TabardModel:GetFogColor() - Returns the model's current fog color
distance = TabardModel:GetFogFar() - Returns the far clipping distance for the model's fog.
distance = TabardModel:GetFogNear() - Returns the near clipping distance for the model's fog.
level = TabardModel:GetFrameLevel() - Sets the level at which the frame is layered relative to others in its strata
strata = TabardModel:GetFrameStrata() - Returns the general layering strata of the frame
height = TabardModel:GetHeight() - Returns the height of the region
left, right, top, bottom = TabardModel:GetHitRectInsets() - Returns the insets from the frame's edges which determine its mouse-interactable area
id = TabardModel:GetID() - Returns the frame's numeric identifier
left = TabardModel:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
enabled, omni, dirX, dirY, dirZ, ambIntensity, ambR, ambG, ambB, dirIntensity, dirR, dirG, dirB = TabardModel:GetLight() - Returns properties of the light sources used when rendering the model
TabardModel:GetLowerBackgroundFileName("filename") - Returns the image file for the lower portion of the tabard model's current background design
TabardModel:GetLowerEmblemFileName("filename") - Returns the image file for the lower portion of the tabard model's current emblem design
TabardModel:GetLowerEmblemTexture(texture) - Sets a `Texture` object to display the lower portion of the tabard model's current emblem design
maxWidth, maxHeight = TabardModel:GetMaxResize() - Returns the maximum size of the frame for user resizing
minWidth, minHeight = TabardModel:GetMinResize() - Returns the minimum size of the frame for user resizing
filename = TabardModel:GetModel() - Returns the model file currently displayed
scale = TabardModel:GetModelScale() - Returns the scale factor determining the size at which the 3D model appears
name = TabardModel:GetName() - Returns the widget object's name
numChildren = TabardModel:GetNumChildren() - Returns the number of child frames belonging to the frame
numPoints = TabardModel:GetNumPoints() - Returns the number of anchor points defined for the region
numRegions = TabardModel:GetNumRegions() - Returns the number of non-Frame child regions belonging to the frame
type = TabardModel:GetObjectType() - Returns the object's widget type
parent = TabardModel:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = TabardModel:GetPoint(index) - Returns information about one of the region's anchor points
x, y, z = TabardModel:GetPosition() - Returns the position of the 3D model within the frame
TabardModel:GetPropagateKeyboardInput() - This function is not yet documented
left, bottom, width, height = TabardModel:GetRect() - Returns the position and dimensions of the region
... = TabardModel:GetRegions() - Returns a list of non-Frame child regions belonging to the frame
right = TabardModel:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
scale = TabardModel:GetScale() - Returns the frame's scale factor
handler = TabardModel:GetScript("scriptType") - Returns the widget's handler function for a script
width, height = TabardModel:GetSize() - Returns the width and height of the region
region = TabardModel:GetTitleRegion() - Returns the frame's TitleRegion object
top = TabardModel:GetTop() - Returns the distance from the bottom of the screen to the top of the region
TabardModel:GetUpperBackgroundFileName("filename") - Returns the image file for the upper portion of the tabard model's current background design
TabardModel:GetUpperEmblemFileName("filename") - Returns the image file for the upper portion of the tabard model's current emblem design
TabardModel:GetUpperEmblemTexture(texture) - Sets a `Texture` object to display the upper portion of the tabard model's current emblem design
width = TabardModel:GetWidth() - Returns the width of the region
hasScript = TabardModel:HasScript("scriptType") - Returns whether the widget supports a script handler
TabardModel:Hide() - Hides the region
TabardModel:HookScript("scriptType", handler) - Securely hooks a script handler
TabardModel:IgnoreDepth(enable) - Sets whether the frame's depth property is ignored (for stereoscopic 3D setups)
TabardModel:InitializeTabardColors() - Sets the tabard model's design to match the player's guild tabard
enabled = TabardModel:IsClampedToScreen() - Returns whether the frame's boundaries are limited to those of the screen
isDragging = TabardModel:IsDragging() - Returns whether the region is currently being dragged
registered = TabardModel:IsEventRegistered("event") - Returns whether the frame is registered for a given [[docs/events|event]]
enabled = TabardModel:IsIgnoringDepth() - Returns whether the frame's depth property is ignored (for stereoscopic 3D setups)
enabled = TabardModel:IsJoystickEnabled() - Returns whether joystick interactivity is enabled for the frame
enabled = TabardModel:IsKeyboardEnabled() - Returns whether keyboard interactivity is enabled for the frame
enabled = TabardModel:IsMouseEnabled() - Returns whether mouse interactivity is enabled for the frame
isOver = TabardModel:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
enabled = TabardModel:IsMouseWheelEnabled() - Returns whether mouse wheel interactivity is enabled for the frame
movable = TabardModel:IsMovable() - Returns whether the frame can be moved by the user
isType = TabardModel:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = TabardModel:IsProtected() - Returns whether the region is protected
enabled = TabardModel:IsResizable() - Returns whether the frame can be resized by the user
shown = TabardModel:IsShown() - Returns whether the region is shown
enabled = TabardModel:IsToplevel() - Returns whether the frame is automatically raised to the front when clicked
enabled = TabardModel:IsUserPlaced() - Returns whether the frame is flagged for automatic saving and restoration of position and dimensions
visible = TabardModel:IsVisible() - Returns whether the region is visible
TabardModel:Lower() - Reduces the frame's frame level below all other frames in its strata
TabardModel:Raise() - Increases the frame's frame level above all other frames in its strata
TabardModel:RefreshCamera() - This function is not yet documented
TabardModel:RefreshUnit() - Updates the model's appearance to match that of its unit
TabardModel:RegisterAllEvents() - Registers the frame for all events
TabardModel:RegisterEvent("event") - Registers the frame for an [[docs/events|event]]
TabardModel:RegisterForDrag(...) - Registers the frame for dragging
TabardModel:ReplaceIconTexture("filename") - Sets the icon texture used by the model
TabardModel:Save() - Saves the current tabard model design as the player's guild tabard
TabardModel:SetAllPoints([region]) or TabardModel:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
TabardModel:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
TabardModel:SetAttribute("name", value) - Sets a secure frame attribute
TabardModel:SetBackdrop(backdrop) - Sets a backdrop graphic for the frame
TabardModel:SetBackdropBorderColor(red, green, blue [, alpha]) - Sets a shading color for the frame's border graphic
TabardModel:SetBackdropColor(red, green, blue [, alpha]) - Sets a shading color for the frame's background graphic
TabardModel:SetBarberShopAlternateForm() - This function is not yet documented
TabardModel:SetCamDistanceScale() - This function is not yet documented
TabardModel:SetCamera(index) - Sets the view angle on the model to a pre-defined camera location
TabardModel:SetClampRectInsets(left, right, top, bottom) - Sets offsets from the frame's edges used when limiting user movement or resizing of the frame
TabardModel:SetClampedToScreen(enable) - Sets whether the frame's boundaries should be limited to those of the screen
TabardModel:SetCreature(creature) - Sets the model to display the 3D model of a specific creature
TabardModel:SetDepth(depth) - Sets the 3D depth of the frame (for stereoscopic 3D configurations)
TabardModel:SetDisplayInfo() - This function is not yet documented
TabardModel:SetDontSavePosition() - This function is not yet documented
TabardModel:SetFacing(facing) - Sets the model's current rotation
TabardModel:SetFogColor(red, green, blue) - Sets the model's fog color, enabling fog display if disabled
TabardModel:SetFogFar(distance) - Sets the far clipping distance for the model's fog.
TabardModel:SetFogNear(distance) - Sets the near clipping distance for the model's fog.
TabardModel:SetFrameLevel(level) - Sets the level at which the frame is layered relative to others in its strata
TabardModel:SetFrameStrata("strata") - Sets the general layering strata of the frame
TabardModel:SetGlow(amount) - Sets the model's glow amount
TabardModel:SetHeight(height) - Sets the region's height
TabardModel:SetHitRectInsets(left, right, top, bottom) - Sets the insets from the frame's edges which determine its mouse-interactable area
TabardModel:SetID(id) - Sets a numeric identifier for the frame
TabardModel:SetLight(enabled, omni, dirX, dirY, dirZ, ambIntensity [, ambR [, ambG [, ambB [, dirIntensity [, dirR [, dirG [, dirB]]]]]]]) - Sets properties of the light sources used when rendering the model
TabardModel:SetMaxResize(maxWidth, maxHeight) - Sets the maximum size of the frame for user resizing
TabardModel:SetMinResize(minWidth, minHeight) - Sets the minimum size of the frame for user resizing
TabardModel:SetModel("filename") - Sets the model file to be displayed
TabardModel:SetModelScale(scale) - Sets the scale factor determining the size at which the 3D model appears
TabardModel:SetMovable(enable) - Sets whether the frame can be moved by the user
TabardModel:SetParent(frame) or TabardModel:SetParent("name") - Makes another frame the parent of this region
TabardModel:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
TabardModel:SetPortraitZoom() - This function is not yet documented
TabardModel:SetPosition(x, y, z) - Returns the position of the 3D model within the frame
TabardModel:SetPropagateKeyboardInput() - This function is not yet documented
TabardModel:SetResizable(enable) - Sets whether the frame can be resized by the user
TabardModel:SetRotation(facing) - Sets the model's current rotation by animating the model
TabardModel:SetScale(scale) - Sets the frame's scale factor
TabardModel:SetScript("scriptType", handler) - Sets the widget's handler function for a script
TabardModel:SetSequence(sequence) - Sets the animation sequence to be used by the model
TabardModel:SetSequenceTime(sequence, time) - Sets the animation sequence and time index to be used by the model
TabardModel:SetSize(width, height) - Sets the size of the region to the specified values
TabardModel:SetToplevel(enable) - Sets whether the frame should automatically come to the front when clicked
TabardModel:SetUnit("unit") - Sets the model to display the 3D model of a specific unit
TabardModel:SetUserPlaced(enable) - Flags the frame for automatic saving and restoration of position and dimensions
TabardModel:SetWidth(width) - Sets the region's width
TabardModel:Show() - Shows the region
TabardModel:StartMoving() - Begins repositioning the frame via mouse movement
TabardModel:StartSizing() - Begins resizing the frame via mouse movement
TabardModel:StopAnimating() - Stops any active animations involving the region or its children
TabardModel:StopMovingOrSizing() - Ends movement or resizing of the frame initiated with [[docs/widgets/Frame/StartMoving|`:StartMoving()`]] or [[docs/widgets/Frame/StartSizing|`:StartSizing()`]]
TabardModel:UnregisterAllEvents() - Unregisters the frame from any [[docs/events|events]] for which it is registered
TabardModel:UnregisterEvent("event") - Unregisters the frame for an event
Texture

canChange = Texture:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
Texture:ClearAllPoints() - Removes all anchor points from the region
animationGroup = Texture:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
alpha = Texture:GetAlpha() - Returns the opacity of the region relative to its parent
... = Texture:GetAnimationGroups() - Returns a list of animation groups belonging to the region
mode = Texture:GetBlendMode() - Returns the blend mode of the texture
bottom = Texture:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
x, y = Texture:GetCenter() - Returns the screen coordinates of the region's center
layer, sublayer = Texture:GetDrawLayer() - Returns the layer at which the region's graphics are drawn relative to others in its frame
height = Texture:GetHeight() - Returns the height of the region
Texture:GetHorizTile() - This function is not yet documented
left = Texture:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
name = Texture:GetName() - Returns the widget object's name
nonBlocking = Texture:GetNonBlocking() - Returns whether the texture object loads its image file in the background
numPoints = Texture:GetNumPoints() - Returns the number of anchor points defined for the region
type = Texture:GetObjectType() - Returns the object's widget type
parent = Texture:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = Texture:GetPoint(index) - Returns information about one of the region's anchor points
left, bottom, width, height = Texture:GetRect() - Returns the position and dimensions of the region
right = Texture:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
width, height = Texture:GetSize() - Returns the width and height of the region
ULx, ULy, LLx, LLy, URx, URy, LRx, LRy = Texture:GetTexCoord() - Returns corner coordinates for scaling or cropping the texture image
texture = Texture:GetTexture() - Returns the path to the texture's image file
top = Texture:GetTop() - Returns the distance from the bottom of the screen to the top of the region
Texture:GetVertTile() - This function is not yet documented
red, green, blue, alpha = Texture:GetVertexColor() - Returns the shading color of the texture
width = Texture:GetWidth() - Returns the width of the region
Texture:Hide() - Hides the region
desaturated = Texture:IsDesaturated() - Returns whether the texture image should be displayed with zero saturation (i.e. converted to grayscale)
isDragging = Texture:IsDragging() - Returns whether the region is currently being dragged
isOver = Texture:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
isType = Texture:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = Texture:IsProtected() - Returns whether the region is protected
shown = Texture:IsShown() - Returns whether the region is shown
visible = Texture:IsVisible() - Returns whether the region is visible
Texture:SetAllPoints([region]) or Texture:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
Texture:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
Texture:SetBlendMode("mode") - Sets the blend mode of the texture
supported = Texture:SetDesaturated(desaturate) - Sets whether the texture image should be displayed with zero saturation (i.e. converted to grayscale)
Texture:SetDrawLayer("layer", sublayer) - Sets the layer at which the region's graphics are drawn relative to others in its frame
Texture:SetGradient("orientation", startR, startG, startB, endR, endG, endB) - Sets a gradient color shading for the texture
Texture:SetGradientAlpha("orientation", startR, startG, startB, startAlpha, endR, endG, endB, endAlpha) - Sets a gradient color shading for the texture (including opacity in the gradient)
Texture:SetHeight(height) - Sets the region's height
Texture:SetHorizTile() - This function is not yet documented
Texture:SetNonBlocking(nonBlocking) - Sets whether the texture object loads its image file in the background
Texture:SetParent(frame) or Texture:SetParent("name") - Makes another frame the parent of this region
Texture:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
Texture:SetRotation(radians) - Rotates the texture image
Texture:SetSize(width, height) - Sets the size of the region to the specified values
Texture:SetTexCoord(left, right, top, bottom) or Texture:SetTexCoord(ULx, ULy, LLx, LLy, URx, URy, LRx, LRy) - Sets corner coordinates for scaling or cropping the texture image
visible = Texture:SetTexture("texture") or Texture:SetTexture(red, green, blue [, alpha]) - Sets the texture object's image or color
Texture:SetVertTile() - This function is not yet documented
Texture:SetVertexColor(red, green, blue [, alpha]) - Sets a color shading for the region's graphics
Texture:SetWidth(width) - Sets the region's width
Texture:Show() - Shows the region
Texture:StopAnimating() - Stops any active animations involving the region or its children
Translation

duration = Translation:GetDuration() - Returns the time for the animation to progress from start to finish
elapsed = Translation:GetElapsed() - Returns the amount of time since the animation began playing
delay = Translation:GetEndDelay() - Returns the amount of time the animation delays after finishing
name = Translation:GetName() - Returns the widget object's name
type = Translation:GetObjectType() - Returns the object's widget type
xOffset, yOffset = Translation:GetOffset() - Returns the animation's translation offsets
order = Translation:GetOrder() - Returns the order of the animation within its parent group
parent = Translation:GetParent() - Returns the object's parent object
progress = Translation:GetProgress() - Returns the progress of an animation, ignoring smoothing effects
progress = Translation:GetProgressWithDelay() - Returns the progress of the animation and associated delays
region = Translation:GetRegionParent() - Returns the `Region` object on which the animation operates
handler = Translation:GetScript("scriptType") - Returns the widget's handler function for a script
progress = Translation:GetSmoothProgress() - Returns the progress of the animation (ignoring start and end delay)
smoothType = Translation:GetSmoothing() - Returns the smoothing type for the animation
delay = Translation:GetStartDelay() - Returns the amount of time the animation delays before its progress begins
hasScript = Translation:HasScript("scriptType") - Returns whether the widget supports a script handler
Translation:HookScript("scriptType", handler) - Securely hooks a script handler
delaying = Translation:IsDelaying() - Returns whether the animation is currently in the middle of a start or end delay
done = Translation:IsDone() - Returns whether the animation has finished playing
isType = Translation:IsObjectType("type") - Returns whether the object belongs to a given widget type
paused = Translation:IsPaused() - Returns whether the animation is currently paused
playing = Translation:IsPlaying() - Returns whether the animation is currently playing
stopped = Translation:IsStopped() - Returns whether the animation is currently stopped
Translation:Pause() - Pauses the animation
Translation:Play() - Plays the animation
Translation:SetDuration(duration) - Sets the time for the animation to progress from start to finish
Translation:SetEndDelay(delay) - Sets the amount of time for the animation to delay after finishing
Translation:SetOffset(xOffset, yOffset) - Sets the animation's translation offsets
Translation:SetOrder(order) - Sets the order for the animation to play within its parent group
Translation:SetParent(animGroup) or Translation:SetParent("animGroupName") - Sets the parent for the animation
Translation:SetScript("scriptType", handler) - Sets the widget's handler function for a script
Translation:SetSmoothProgress() - This function is not yet documented
Translation:SetSmoothing("smoothType") - Sets the smoothing type for the animation
Translation:SetStartDelay(delay) - Sets the amount of time for the animation to delay before its progress begins
Translation:Stop() - Stops the animation
UIObject

name = UIObject:GetName() - Returns the widget object's name
type = UIObject:GetObjectType() - Returns the object's widget type
isType = UIObject:IsObjectType("type") - Returns whether the object belongs to a given widget type
VisibleRegion

canChange = VisibleRegion:CanChangeProtectedState() - Returns whether protected properties of the region can be changed by non-secure scripts
VisibleRegion:ClearAllPoints() - Removes all anchor points from the region
animationGroup = VisibleRegion:CreateAnimationGroup(["name" [, "inheritsFrom"]]) - Creates a new AnimationGroup as a child of the region
alpha = VisibleRegion:GetAlpha() - Returns the opacity of the region relative to its parent
... = VisibleRegion:GetAnimationGroups() - Returns a list of animation groups belonging to the region
bottom = VisibleRegion:GetBottom() - Returns the distance from the bottom of the screen to the bottom of the region
x, y = VisibleRegion:GetCenter() - Returns the screen coordinates of the region's center
height = VisibleRegion:GetHeight() - Returns the height of the region
left = VisibleRegion:GetLeft() - Returns the distance from the left edge of the screen to the left edge of the region
name = VisibleRegion:GetName() - Returns the widget object's name
numPoints = VisibleRegion:GetNumPoints() - Returns the number of anchor points defined for the region
type = VisibleRegion:GetObjectType() - Returns the object's widget type
parent = VisibleRegion:GetParent() - Returns the object's parent object
point, relativeTo, relativePoint, xOffset, yOffset = VisibleRegion:GetPoint(index) - Returns information about one of the region's anchor points
left, bottom, width, height = VisibleRegion:GetRect() - Returns the position and dimensions of the region
right = VisibleRegion:GetRight() - Returns the distance from the left edge of the screen to the right edge of the region
width, height = VisibleRegion:GetSize() - Returns the width and height of the region
top = VisibleRegion:GetTop() - Returns the distance from the bottom of the screen to the top of the region
width = VisibleRegion:GetWidth() - Returns the width of the region
VisibleRegion:Hide() - Hides the region
isDragging = VisibleRegion:IsDragging() - Returns whether the region is currently being dragged
isOver = VisibleRegion:IsMouseOver([topOffset [, leftOffset [, bottomOffset [, rightOffset]]]]) - Returns whether the mouse cursor is over the given region
isType = VisibleRegion:IsObjectType("type") - Returns whether the object belongs to a given widget type
isProtected, explicit = VisibleRegion:IsProtected() - Returns whether the region is protected
shown = VisibleRegion:IsShown() - Returns whether the region is shown
visible = VisibleRegion:IsVisible() - Returns whether the region is visible
VisibleRegion:SetAllPoints([region]) or VisibleRegion:SetAllPoints(["name"]) - Sets all anchor points of the region to match those of another region
VisibleRegion:SetAlpha(alpha) - Sets the opacity of the region relative to its parent
VisibleRegion:SetHeight(height) - Sets the region's height
VisibleRegion:SetParent(frame) or VisibleRegion:SetParent("name") - Makes another frame the parent of this region
VisibleRegion:SetPoint("point" [, relativeTo [, "relativePoint" [, xOffset [, yOffset]]]]) - Sets an anchor point for the region
VisibleRegion:SetSize(width, height) - Sets the size of the region to the specified values
VisibleRegion:SetWidth(width) - Sets the region's width
VisibleRegion:Show() - Shows the region
VisibleRegion:StopAnimating() - Stops any active animations involving the region or its children
